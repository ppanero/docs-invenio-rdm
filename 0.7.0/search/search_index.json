{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Welcome to the InvenioRDM project! InvenioRDM is a ready-to-go, turn-key Research Data Management repository. It puts together the Invenio framework so you don't have to. This documentation walks you through installing, configuring, and deploying your very own InvenioRDM instance. Furthermore, you can customize it for your needs and even add your own extensions! Follow the sections below in order to get a full picture of how to use InvenioRDM, or go straight to what you're interested in - each section is independent. Install \u00b6 To get started with InvenioRDM, you will want to install invenio-cli , our command line tool for creating and updating your instance. This tool in turn allows you to easily install an instance and manage it. > Installation Guide Preview \u00b6 To quickly get a sense for what InvenioRDM is and what it can do, you can preview the default instance after installing invenio-cli . Just follow the one-page guide below. > Quickly Preview an Instance Develop \u00b6 Once you are ready to dive in and work on your own instance - that is, configure, customize, debug, and iterate -, you will want to setup your project for development. Various commands are at your disposal and we walk you through the workflow for how to be effective with them. > Getting Started on your Instance Extensions \u00b6 InvenioRDM supports a great variety of extensions that can adapt it to your infrastructure. It also supports the addition of custom ones. > Extensions setup Deploy \u00b6 Ready to deploy into production? Follow these guides to put a small instance in production and learn the avenues to take and decisions to make to grow it. Whether you use Openshift or Kubernetes, we've got you covered. > Deployment Guides","title":"Home"},{"location":"#home","text":"Welcome to the InvenioRDM project! InvenioRDM is a ready-to-go, turn-key Research Data Management repository. It puts together the Invenio framework so you don't have to. This documentation walks you through installing, configuring, and deploying your very own InvenioRDM instance. Furthermore, you can customize it for your needs and even add your own extensions! Follow the sections below in order to get a full picture of how to use InvenioRDM, or go straight to what you're interested in - each section is independent.","title":"Home"},{"location":"#install","text":"To get started with InvenioRDM, you will want to install invenio-cli , our command line tool for creating and updating your instance. This tool in turn allows you to easily install an instance and manage it. > Installation Guide","title":"Install"},{"location":"#preview","text":"To quickly get a sense for what InvenioRDM is and what it can do, you can preview the default instance after installing invenio-cli . Just follow the one-page guide below. > Quickly Preview an Instance","title":"Preview"},{"location":"#develop","text":"Once you are ready to dive in and work on your own instance - that is, configure, customize, debug, and iterate -, you will want to setup your project for development. Various commands are at your disposal and we walk you through the workflow for how to be effective with them. > Getting Started on your Instance","title":"Develop"},{"location":"#extensions","text":"InvenioRDM supports a great variety of extensions that can adapt it to your infrastructure. It also supports the addition of custom ones. > Extensions setup","title":"Extensions"},{"location":"#deploy","text":"Ready to deploy into production? Follow these guides to put a small instance in production and learn the avenues to take and decisions to make to grow it. Whether you use Openshift or Kubernetes, we've got you covered. > Deployment Guides","title":"Deploy"},{"location":"deployment/","text":"How can I deploy InvenioRDM? \u00b6 In previous sections, you could see how to install InvenioRDM in your local computer for development, and how to run containerized environment that demonstrates the setup of all components running in docker containers. In this section we cover how to deploy InvenioRDM in a closer-to-production manner. Do not deploy as-is in production Please note the \"closer-to-production\" statement, this is because even if the designed architecture can scale and withstand the load of a production service (It has been tested to stand peaks of up to 180 requests/s), you need to review the security configurations and customize resources to fit your use case. In addition, Elasticsearch and PostgreSQL can be deployed along with the application, however they are not configured with redundancy and persistance in mind. Helm Charts \u00b6 Helm is the package manager for Kubernetes . This means, that by using Helm charts (packages in Helm lingo) you can deploy InvenioRDM in any cloud provider that supports Kubernetes (e.g. OpenShift clusters, Google Cloud, Amazon Web Services, IBM Cloud). What is a Helm chart? A Helm chart is a definition of the architecture of the system, meaning how all components interconnect with each other (Similar to a docker-compose file). In addition, Helm allows you to install, version, upgrade and rollback your InvenioRDM installation in an easy way. You can find more information about Helm here . Chart description \u00b6 The current chart proposes the following architecture: HAProxy as entry point. It provides load balancing and queuing of requests. Nginx as reverse proxy. It serves as reverse proxy, to help HAproxy and uWSGI \"talk\" the same language (protocol). Web application nodes, running the uWSGI application. Redis and RabbitMQ come along in containers. Elasticsearch and PostgreSQL can be added to the deployment. However they are not configured in-depth and therefore not suited for more than demo purposes. For more in-depth documentation see the services description and the configuration available here . Pre-Requirements \u00b6 Helm version 3.x Adding the helm-invenio repository. To install Helm, follow the official documentation linked above. Once you have it installed you can add the repository . The syntax is as follows: helm repo add [NAME] [URL] [flags] Let's add the helm-invenio (NAME) repository and check that it has been added correctly: $ helm repo add helm-invenio https://inveniosoftware.github.io/helm-invenio/ $ helm repo update $ helm search invenio NAME CHART VERSION APP VERSION DESCRIPTION helm-invenio/invenio 0.2.0 1.16.0 Open Source framework for large-scale digital repositories helm-invenio/invenio 0.1.0 1.16.0 Open Source framework for large-scale digital repositories You can also install by cloning from GitHub: $ git clone https://github.com/inveniosoftware/helm-invenio.git $ cd helm-invenio/ In this case, you will need to reference the ./invenio folder rather than the chart name ( helm-invenio/invenio ). Supported Platforms \u00b6 Only compatible with OpenShift Please note that currently this Helm chart is only compatible with OpenShift. OpenShift Kubernetes","title":"How can I deploy it?"},{"location":"deployment/#how-can-i-deploy-inveniordm","text":"In previous sections, you could see how to install InvenioRDM in your local computer for development, and how to run containerized environment that demonstrates the setup of all components running in docker containers. In this section we cover how to deploy InvenioRDM in a closer-to-production manner. Do not deploy as-is in production Please note the \"closer-to-production\" statement, this is because even if the designed architecture can scale and withstand the load of a production service (It has been tested to stand peaks of up to 180 requests/s), you need to review the security configurations and customize resources to fit your use case. In addition, Elasticsearch and PostgreSQL can be deployed along with the application, however they are not configured with redundancy and persistance in mind.","title":"How can I deploy InvenioRDM?"},{"location":"deployment/#helm-charts","text":"Helm is the package manager for Kubernetes . This means, that by using Helm charts (packages in Helm lingo) you can deploy InvenioRDM in any cloud provider that supports Kubernetes (e.g. OpenShift clusters, Google Cloud, Amazon Web Services, IBM Cloud). What is a Helm chart? A Helm chart is a definition of the architecture of the system, meaning how all components interconnect with each other (Similar to a docker-compose file). In addition, Helm allows you to install, version, upgrade and rollback your InvenioRDM installation in an easy way. You can find more information about Helm here .","title":"Helm Charts"},{"location":"deployment/#chart-description","text":"The current chart proposes the following architecture: HAProxy as entry point. It provides load balancing and queuing of requests. Nginx as reverse proxy. It serves as reverse proxy, to help HAproxy and uWSGI \"talk\" the same language (protocol). Web application nodes, running the uWSGI application. Redis and RabbitMQ come along in containers. Elasticsearch and PostgreSQL can be added to the deployment. However they are not configured in-depth and therefore not suited for more than demo purposes. For more in-depth documentation see the services description and the configuration available here .","title":"Chart description"},{"location":"deployment/#pre-requirements","text":"Helm version 3.x Adding the helm-invenio repository. To install Helm, follow the official documentation linked above. Once you have it installed you can add the repository . The syntax is as follows: helm repo add [NAME] [URL] [flags] Let's add the helm-invenio (NAME) repository and check that it has been added correctly: $ helm repo add helm-invenio https://inveniosoftware.github.io/helm-invenio/ $ helm repo update $ helm search invenio NAME CHART VERSION APP VERSION DESCRIPTION helm-invenio/invenio 0.2.0 1.16.0 Open Source framework for large-scale digital repositories helm-invenio/invenio 0.1.0 1.16.0 Open Source framework for large-scale digital repositories You can also install by cloning from GitHub: $ git clone https://github.com/inveniosoftware/helm-invenio.git $ cd helm-invenio/ In this case, you will need to reference the ./invenio folder rather than the chart name ( helm-invenio/invenio ).","title":"Pre-Requirements"},{"location":"deployment/#supported-platforms","text":"Only compatible with OpenShift Please note that currently this Helm chart is only compatible with OpenShift. OpenShift Kubernetes","title":"Supported Platforms"},{"location":"deployment/benchmark/","text":"Benchmarking your Invenio instance \u00b6 The operations that we are going to run in this section can be highly demanding. Therefore, you might not want to run them against a production instance since it might cause downtime. Nonetheless, we want to have an environment that resembles as close as possible to our InvenioRDM instance. In consequence, we might want to add some data to our instance in order to have some records to stress-test against. Populate your instance \u00b6 Already populated instances If you already have content in the instance this step is not needed. We are going to create some demo records using a new CLI command. We are going to use invenio commands. You can lunch a job using the provided job templates (recommended) or execute them in a web container's terminal. OpenShift commands The following commands assume you are using OpenShift. For bare Kubernetes, commands might be slightly different. Launch a job You will need to either download the file from here or go to the jobs folder if you have the helm-invenio repository cloned in your machine. The following job will be executed by a worker and create 10 demo records. $ oc process -f job.yml --param JOB_NAME = 'demo-data' \\ --param JOB_COMMAND = 'invenio rdm-records demo' | oc create -f - Execution in a web container To populate the instance with the alternative method, you need to connect to a running pod, activate python3 and execute the command: $ oc get pods # List all pods $ oc exec -it <web-pod-id> bash # Connect to a web pod $ . scl_source enable rh-python36 # Activate python3 $ invenio rdm-records demo # Create 10 demo records This methods populate the instance with 10 records. If you need more, you can run it multiple times. However, obtaining a high number of records might be time consuming with this method. In that case, you can use bulk indexing, you can find more documentation on how to do it here . Benchmark \u00b6 In order to test the load that your instance is able to stand, you can use Locust . Here you can find a locustfile.py file ready to test an Invenio instance. Let's test it! First install locust: $ pip install locust The given locust file makes use of some values that you might want to adjust to your instance: RECID = 'h2kh0-vfq12' NON_EXISTING_RECID = 9999 SEARCH_QUERY = \"Baker\" RECID represents the ID of a record that exists in the instance, while NON_EXISTING_RECID represents one that doesn't. Finally, SEARCH_QUERY should contain a string that matches a limited amount of records. The purpose of this query is to test when only certain records are returned. A full query (i.e. all records) is also tested. Then, in order to lunch the tests you need to be in the directory where the locustfile.py is: $ curl https://raw.githubusercontent.com/inveniosoftware/helm-invenio/master/benchmark/locustfile.py \\ -o /path/where/to/save/locustfile.py $ cd /path/where/to/save/ $ locust Once it is running, you can navigate to the web interface and set the amount of users/and users joining per second. Play with these numbers until you reach the number of requests per second (shown in the top right) that you are looking for.","title":"Benchmarking"},{"location":"deployment/benchmark/#benchmarking-your-invenio-instance","text":"The operations that we are going to run in this section can be highly demanding. Therefore, you might not want to run them against a production instance since it might cause downtime. Nonetheless, we want to have an environment that resembles as close as possible to our InvenioRDM instance. In consequence, we might want to add some data to our instance in order to have some records to stress-test against.","title":"Benchmarking your Invenio instance"},{"location":"deployment/benchmark/#populate-your-instance","text":"Already populated instances If you already have content in the instance this step is not needed. We are going to create some demo records using a new CLI command. We are going to use invenio commands. You can lunch a job using the provided job templates (recommended) or execute them in a web container's terminal. OpenShift commands The following commands assume you are using OpenShift. For bare Kubernetes, commands might be slightly different. Launch a job You will need to either download the file from here or go to the jobs folder if you have the helm-invenio repository cloned in your machine. The following job will be executed by a worker and create 10 demo records. $ oc process -f job.yml --param JOB_NAME = 'demo-data' \\ --param JOB_COMMAND = 'invenio rdm-records demo' | oc create -f - Execution in a web container To populate the instance with the alternative method, you need to connect to a running pod, activate python3 and execute the command: $ oc get pods # List all pods $ oc exec -it <web-pod-id> bash # Connect to a web pod $ . scl_source enable rh-python36 # Activate python3 $ invenio rdm-records demo # Create 10 demo records This methods populate the instance with 10 records. If you need more, you can run it multiple times. However, obtaining a high number of records might be time consuming with this method. In that case, you can use bulk indexing, you can find more documentation on how to do it here .","title":"Populate your instance"},{"location":"deployment/benchmark/#benchmark","text":"In order to test the load that your instance is able to stand, you can use Locust . Here you can find a locustfile.py file ready to test an Invenio instance. Let's test it! First install locust: $ pip install locust The given locust file makes use of some values that you might want to adjust to your instance: RECID = 'h2kh0-vfq12' NON_EXISTING_RECID = 9999 SEARCH_QUERY = \"Baker\" RECID represents the ID of a record that exists in the instance, while NON_EXISTING_RECID represents one that doesn't. Finally, SEARCH_QUERY should contain a string that matches a limited amount of records. The purpose of this query is to test when only certain records are returned. A full query (i.e. all records) is also tested. Then, in order to lunch the tests you need to be in the directory where the locustfile.py is: $ curl https://raw.githubusercontent.com/inveniosoftware/helm-invenio/master/benchmark/locustfile.py \\ -o /path/where/to/save/locustfile.py $ cd /path/where/to/save/ $ locust Once it is running, you can navigate to the web interface and set the amount of users/and users joining per second. Play with these numbers until you reach the number of requests per second (shown in the top right) that you are looking for.","title":"Benchmark"},{"location":"deployment/configuration/","text":"Configuration \u00b6 This section explains the current configuration options that are available for the different components deployed by this Helm chart. Global \u00b6 There is only one mandatory configuration: the host name. host : your-rdm-instance.com Moreover, the services can be deployed along. Note that it is recommended to deploy Elasticsearch and PostgreSQL separately for a production deployment. Therefore, by default only redis and rabbitmq are enabled. Example configuration: postgresql : inside_cluster : false elasticsearch : inside_cluster : false !!! info \"inside_cluster availability Note that the inside_cluster variable is supported for redis , rabbitmq , elasticsearch , postgresql and haproxy . The rest of the components are mandatory. HAProxy \u00b6 You can change the number of connections allowed by haproxy with the maxconn variable: haproxy: maxconn: 100 Nginx \u00b6 This chart allows you to configure the amount of connections per nginx node (replica) and the amount of nodes: nginx: max_conns: 100 replicas: 2 Web nodes \u00b6 The web nodes host the WSGI application. In order to be scalable you can configure the number of \"nodes\", called replicas, with how many processes each node runs and with how many threads per process. The only mandatory parameter is the docker image ( image ) that should get as value the url where to pull the image from. In addition, you can add automatic scaling by setting minimum ( min_web_replicas ) and maximum ( max_web_replicas ) replicas, and the cpu usage threshold in percentage ( scaler_cpu_utilization ) that spawns a new node. For example, with a scaler_cpu_utilization value of 65, it means that when the average CPU utilization of the nodes reaches 65%, a new node will be spawned. This process will repeat itself until the maximum number of replicas has been reached: web : image : your/invenio-image replicas : 6 uwsgi : processes : 6 threads : 4 autoscaler : enabled : false # Scale when CPU usage gets to scaler_cpu_utilization : 65 max_web_replicas : 10 min_web_replicas : 2 Worker nodes \u00b6 Finally, the worker nodes. By default they are enabled, but you can cancel their deployment by setting enabled to false . If enabled, they require an image like the web nodes. In addition, you can configure the number of worker nodes (replicas) to be deployed, the application they will run, their concurrency level and their logging level. yaml worker: enabled: true image: your/invenio-image # Invenio Celery worker application app: invenio_app.celery # Number of concurrent Celery workers per pod concurrency: 2 log_level: INFO replicas: 2","title":"Configuration"},{"location":"deployment/configuration/#configuration","text":"This section explains the current configuration options that are available for the different components deployed by this Helm chart.","title":"Configuration"},{"location":"deployment/configuration/#global","text":"There is only one mandatory configuration: the host name. host : your-rdm-instance.com Moreover, the services can be deployed along. Note that it is recommended to deploy Elasticsearch and PostgreSQL separately for a production deployment. Therefore, by default only redis and rabbitmq are enabled. Example configuration: postgresql : inside_cluster : false elasticsearch : inside_cluster : false !!! info \"inside_cluster availability Note that the inside_cluster variable is supported for redis , rabbitmq , elasticsearch , postgresql and haproxy . The rest of the components are mandatory.","title":"Global"},{"location":"deployment/configuration/#haproxy","text":"You can change the number of connections allowed by haproxy with the maxconn variable: haproxy: maxconn: 100","title":"HAProxy"},{"location":"deployment/configuration/#nginx","text":"This chart allows you to configure the amount of connections per nginx node (replica) and the amount of nodes: nginx: max_conns: 100 replicas: 2","title":"Nginx"},{"location":"deployment/configuration/#web-nodes","text":"The web nodes host the WSGI application. In order to be scalable you can configure the number of \"nodes\", called replicas, with how many processes each node runs and with how many threads per process. The only mandatory parameter is the docker image ( image ) that should get as value the url where to pull the image from. In addition, you can add automatic scaling by setting minimum ( min_web_replicas ) and maximum ( max_web_replicas ) replicas, and the cpu usage threshold in percentage ( scaler_cpu_utilization ) that spawns a new node. For example, with a scaler_cpu_utilization value of 65, it means that when the average CPU utilization of the nodes reaches 65%, a new node will be spawned. This process will repeat itself until the maximum number of replicas has been reached: web : image : your/invenio-image replicas : 6 uwsgi : processes : 6 threads : 4 autoscaler : enabled : false # Scale when CPU usage gets to scaler_cpu_utilization : 65 max_web_replicas : 10 min_web_replicas : 2","title":"Web nodes"},{"location":"deployment/configuration/#worker-nodes","text":"Finally, the worker nodes. By default they are enabled, but you can cancel their deployment by setting enabled to false . If enabled, they require an image like the web nodes. In addition, you can configure the number of worker nodes (replicas) to be deployed, the application they will run, their concurrency level and their logging level. yaml worker: enabled: true image: your/invenio-image # Invenio Celery worker application app: invenio_app.celery # Number of concurrent Celery workers per pod concurrency: 2 log_level: INFO replicas: 2","title":"Worker nodes"},{"location":"deployment/image/","text":"Build your instance Docker image \u00b6 In this section you will learn to build the docker image of your InvenioRDM instance! Doing so is as simple as running the following command: docker build -t demo-inveniordm /path/to/your/instance --build-arg include_assets=true Tag name In this case we have chosen to call our image demo-inveniordm , but you can choose your own name. Why is the include_assets flag needed When running InvenioRDM in local ( invenio-cli run ), you are running the uWSGI server on your own machine where you have built the statics. On the other hand, when running invenio-cli containerize you are building the docker image and then running it along the other containers. There, invenio-cli takes care of building the statics in the mounted volume for you. However, when building the image on your own (e.g. deploying somewhere else), you need to take care of the statics yourself. This is the case when deploying in OpenShift. To solve this problem the chart defines a shared volume mounted on the Nginx and the Web containers. When a volume is mounted it overwrites the contents of the folder (i.e. it will delete the assets). Therefore, we make use of an initContainer to mount the volume in a temporary location and copy to the volume the assets. This way when the volume is mounted into Nginx and Web containers it already has the assets. Being the end result that /static files can be served directly by Nginx.","title":"Building your image"},{"location":"deployment/image/#build-your-instance-docker-image","text":"In this section you will learn to build the docker image of your InvenioRDM instance! Doing so is as simple as running the following command: docker build -t demo-inveniordm /path/to/your/instance --build-arg include_assets=true Tag name In this case we have chosen to call our image demo-inveniordm , but you can choose your own name. Why is the include_assets flag needed When running InvenioRDM in local ( invenio-cli run ), you are running the uWSGI server on your own machine where you have built the statics. On the other hand, when running invenio-cli containerize you are building the docker image and then running it along the other containers. There, invenio-cli takes care of building the statics in the mounted volume for you. However, when building the image on your own (e.g. deploying somewhere else), you need to take care of the statics yourself. This is the case when deploying in OpenShift. To solve this problem the chart defines a shared volume mounted on the Nginx and the Web containers. When a volume is mounted it overwrites the contents of the folder (i.e. it will delete the assets). Therefore, we make use of an initContainer to mount the volume in a temporary location and copy to the volume the assets. This way when the volume is mounted into Nginx and Web containers it already has the assets. Being the end result that /static files can be served directly by Nginx.","title":"Build your instance Docker image"},{"location":"deployment/kubernetes/","text":"Kubernetes \u00b6 Coming soon","title":"Kubernetes"},{"location":"deployment/kubernetes/#kubernetes","text":"Coming soon","title":"Kubernetes"},{"location":"deployment/openshift/","text":"OpenShift \u00b6 Pre-Requirements \u00b6 Global deployment pre-requirements OpenShift CLI version 3.11+ Deploying InvenioRDM \u00b6 First of all, log in and select the right project in your OpenShift cluster: $ oc login <your.openshift.cluster> $ oc project invenio Secrets \u00b6 Before deploying, you need to provide the credentials so the application can access the different services. Replace the credentials and configuration below with your own: Invenio secret key : console $ SECRET_KEY=$(openssl rand -hex 8) $ oc create secret generic \\ --from-literal=\"INVENIO_SECRET_KEY=$SECRET_KEY\" \\ invenio-secrets Database secrets: $ POSTGRESQL_PASSWORD = $( openssl rand -hex 8 ) $ POSTGRESQL_USER = invenio $ POSTGRESQL_HOST = db $ POSTGRESQL_PORT = 5432 $ POSTGRESQL_DATABASE = invenio $ oc create secret generic \\ --from-literal = \"POSTGRESQL_PASSWORD= $POSTGRESQL_PASSWORD \" \\ --from-literal = \"SQLALCHEMY_DB_URI=postgresql+psycopg2:// $POSTGRESQL_USER : $POSTGRESQL_PASSWORD @ $POSTGRESQL_HOST : $POSTGRESQL_PORT / $POSTGRESQL_DATABASE \" \\ db-secrets secret \"db-secrets\" created RabbitMQ secrets: $ RABBITMQ_DEFAULT_PASS = $( openssl rand -hex 8 ) $ oc create secret generic \\ --from-literal = \"RABBITMQ_DEFAULT_PASS= $RABBITMQ_DEFAULT_PASS \" \\ --from-literal = \"CELERY_BROKER_URL=amqp://guest: $RABBITMQ_DEFAULT_PASS @mq:5672/\" \\ mq-secrets secret \"mq-secrets\" created Elasticsearch secrets: Elasticsearch variables Currently, and until invenio-search#198 has been addressed, the Elasticsearch configuration has to be loaded in a single environment variable. $ export INVENIO_SEARCH_ELASTIC_HOSTS = \"[{'host': 'localhost', 'timeout': 30, 'port': 9200, 'use_ssl': True, 'http_auth':('USERNAME_CHANGEME', 'PASSWORD_CHANGEME')}]\" $ oc create secret generic \\ --from-literal = \"INVENIO_SEARCH_ELASTIC_HOSTS= $INVENIO_SEARCH_ELASTIC_HOSTS \" \\ elasticsearch-secrets Extra configuration is possible Note that you might need to add extra configuration to the Elasticsearch hosts, such as certificate verification ( verify_certs ), prefixing ( url_prefix ) and more. Install InvenioRDM \u00b6 Before installing you need to configure two things in your values.yml file. The rest are optional and you can read more about them here : The host. The web/worker docker images. host : yourhost.localhost web : image : your/invenio-image worker : image : your/invenio-image Image registries You can get to know more about where and how to store you instance's docker image here . The next step is the installation itself, with your own configuration in the values.yaml . If you added the repository, you can install it by using the chart name and the desired version: $ helm install -f values.yaml invenio helm-invenio/invenio --version 0 .2.0 If you want to install from GitHub, in a clone you can do so as follows: $ cd helm-invenio/ $ helm install -f values.yaml invenio ./invenio [ --disable-openapi-validation ] In both cases the output will be: NAME: invenio LAST DEPLOYED: Mon Mar 9 16:25:15 2020 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None NOTES:Invenio is ready to rock :rocket: Bypassing openapi validation We must pass --disable-openapi-validation as there is currently a problem with OpenShift objects and Helm when it comes to client side validation, see issue . Setup the instance \u00b6 Once the instance has been installed you have to set up the services. Note that this step is only needed the first time, if you are upgrading the instance this is not needed. Get a bash terminal in a web pod: $ oc get pods $ oc exec -it <web-pod> bash Setup the instance using the invenio commands: $ . scl_source enable rh-python36 $ invenio db init # If the db does not exist already, otherwise `create` is enough $ invenio db create $ invenio index init $ invenio index queue init purge $ invenio files location --default 'default-location' $( invenio shell --no-term-title -c \"print(app.instance_path)\" ) '/data' $ invenio roles create admin $ invenio access allow superuser-access role admin Launching jobs \u00b6 One time job In some cases you might want to run jobs, for example to populate the instance with records. $ oc process -f job.yml --param JOB_NAME = 'demo-data-1' \\ --param JOB_COMMAND = 'invenio rdm-records demo' | oc create -f - Cron job Now, imagine you have some bulk record indexing, or any other task that you have to do periodically. For that, you can define cronjobs: $ oc process -f cronjob.yml --param JOB_NAME = index-run \\ --param JOB_COMMAND = invenio index run -d | oc create -f - Upgrade your instance \u00b6 If you have performed some changes to your instance (e.g. configuration) or you want to upgrade the version of the chart, you can do so with the upgrade command of helm . Not supported yet Note that you still need to disable the openapi validation which is not supported yet in version 3.1.2 (However, it is merged into the master branch and should come out soon). For now we will have to helm uninstall and then install again. $ helm upgrade -f values.yaml --disable-openapi-validation","title":"OpenShift"},{"location":"deployment/openshift/#openshift","text":"","title":"OpenShift"},{"location":"deployment/openshift/#pre-requirements","text":"Global deployment pre-requirements OpenShift CLI version 3.11+","title":"Pre-Requirements"},{"location":"deployment/openshift/#deploying-inveniordm","text":"First of all, log in and select the right project in your OpenShift cluster: $ oc login <your.openshift.cluster> $ oc project invenio","title":"Deploying InvenioRDM"},{"location":"deployment/openshift/#secrets","text":"Before deploying, you need to provide the credentials so the application can access the different services. Replace the credentials and configuration below with your own: Invenio secret key : console $ SECRET_KEY=$(openssl rand -hex 8) $ oc create secret generic \\ --from-literal=\"INVENIO_SECRET_KEY=$SECRET_KEY\" \\ invenio-secrets Database secrets: $ POSTGRESQL_PASSWORD = $( openssl rand -hex 8 ) $ POSTGRESQL_USER = invenio $ POSTGRESQL_HOST = db $ POSTGRESQL_PORT = 5432 $ POSTGRESQL_DATABASE = invenio $ oc create secret generic \\ --from-literal = \"POSTGRESQL_PASSWORD= $POSTGRESQL_PASSWORD \" \\ --from-literal = \"SQLALCHEMY_DB_URI=postgresql+psycopg2:// $POSTGRESQL_USER : $POSTGRESQL_PASSWORD @ $POSTGRESQL_HOST : $POSTGRESQL_PORT / $POSTGRESQL_DATABASE \" \\ db-secrets secret \"db-secrets\" created RabbitMQ secrets: $ RABBITMQ_DEFAULT_PASS = $( openssl rand -hex 8 ) $ oc create secret generic \\ --from-literal = \"RABBITMQ_DEFAULT_PASS= $RABBITMQ_DEFAULT_PASS \" \\ --from-literal = \"CELERY_BROKER_URL=amqp://guest: $RABBITMQ_DEFAULT_PASS @mq:5672/\" \\ mq-secrets secret \"mq-secrets\" created Elasticsearch secrets: Elasticsearch variables Currently, and until invenio-search#198 has been addressed, the Elasticsearch configuration has to be loaded in a single environment variable. $ export INVENIO_SEARCH_ELASTIC_HOSTS = \"[{'host': 'localhost', 'timeout': 30, 'port': 9200, 'use_ssl': True, 'http_auth':('USERNAME_CHANGEME', 'PASSWORD_CHANGEME')}]\" $ oc create secret generic \\ --from-literal = \"INVENIO_SEARCH_ELASTIC_HOSTS= $INVENIO_SEARCH_ELASTIC_HOSTS \" \\ elasticsearch-secrets Extra configuration is possible Note that you might need to add extra configuration to the Elasticsearch hosts, such as certificate verification ( verify_certs ), prefixing ( url_prefix ) and more.","title":"Secrets"},{"location":"deployment/openshift/#install-inveniordm","text":"Before installing you need to configure two things in your values.yml file. The rest are optional and you can read more about them here : The host. The web/worker docker images. host : yourhost.localhost web : image : your/invenio-image worker : image : your/invenio-image Image registries You can get to know more about where and how to store you instance's docker image here . The next step is the installation itself, with your own configuration in the values.yaml . If you added the repository, you can install it by using the chart name and the desired version: $ helm install -f values.yaml invenio helm-invenio/invenio --version 0 .2.0 If you want to install from GitHub, in a clone you can do so as follows: $ cd helm-invenio/ $ helm install -f values.yaml invenio ./invenio [ --disable-openapi-validation ] In both cases the output will be: NAME: invenio LAST DEPLOYED: Mon Mar 9 16:25:15 2020 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None NOTES:Invenio is ready to rock :rocket: Bypassing openapi validation We must pass --disable-openapi-validation as there is currently a problem with OpenShift objects and Helm when it comes to client side validation, see issue .","title":"Install InvenioRDM"},{"location":"deployment/openshift/#setup-the-instance","text":"Once the instance has been installed you have to set up the services. Note that this step is only needed the first time, if you are upgrading the instance this is not needed. Get a bash terminal in a web pod: $ oc get pods $ oc exec -it <web-pod> bash Setup the instance using the invenio commands: $ . scl_source enable rh-python36 $ invenio db init # If the db does not exist already, otherwise `create` is enough $ invenio db create $ invenio index init $ invenio index queue init purge $ invenio files location --default 'default-location' $( invenio shell --no-term-title -c \"print(app.instance_path)\" ) '/data' $ invenio roles create admin $ invenio access allow superuser-access role admin","title":"Setup the instance"},{"location":"deployment/openshift/#launching-jobs","text":"One time job In some cases you might want to run jobs, for example to populate the instance with records. $ oc process -f job.yml --param JOB_NAME = 'demo-data-1' \\ --param JOB_COMMAND = 'invenio rdm-records demo' | oc create -f - Cron job Now, imagine you have some bulk record indexing, or any other task that you have to do periodically. For that, you can define cronjobs: $ oc process -f cronjob.yml --param JOB_NAME = index-run \\ --param JOB_COMMAND = invenio index run -d | oc create -f -","title":"Launching jobs"},{"location":"deployment/openshift/#upgrade-your-instance","text":"If you have performed some changes to your instance (e.g. configuration) or you want to upgrade the version of the chart, you can do so with the upgrade command of helm . Not supported yet Note that you still need to disable the openapi validation which is not supported yet in version 3.1.2 (However, it is merged into the master branch and should come out soon). For now we will have to helm uninstall and then install again. $ helm upgrade -f values.yaml --disable-openapi-validation","title":"Upgrade your instance"},{"location":"deployment/registries/","text":"Image registries \u00b6 There are several places where you can store your docker image. In this section, we cover some of the most known ones. However, you can use any other of your preference. Build your image before hand In the following documentation we are assuming that you have already built your docker image. You can find documentation on how to do it here . DockerHub \u00b6 To use docker hub, follow Docker's official documentation . GitHub \u00b6 To store your image in GitHub you will need a repository. You can use your instance's one. For example: https://github/yourusername/rdmrepo . In addition, you will need to create an access token . This access token must have read:packages and write:packages scopes. The first step is to log in to GitHub's docker registry: $ docker login docker.pkg.github.com -u <YOU_GITHUB_USERNAME> -p <YOUR_GITHUB_TOKEN> Then, find your docker image and tag it with the url of your GitHub registry: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB $ docker tag demo-inveniordm docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest Project name Note that rdmrepo is the name of your GitHub repository. Therefore the tag is: docker.pkg.github.co/<your_github_user_name>/<your_github_repo_name>/<your_image_name>:<version> Check that it was tagged correctly: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest latest 9b6dd5ae6b48 17 hours ago 2.33GB The last step is to push your package to the GitHub registry: docker push docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest In order to use this image, you must set the following value in your values.yaml file (for both web and worker ): web: image: docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest worker: image: docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest Even if your project and/or image is public, GitHub requires you to be authenticated in order to pull your image. In OpenShift you can change the default pulling configuration so that it uses your token. You can do so as follows: $ oc create secret docker-registry <SECRET_NAME> \\ --docker-server = docker.pkg.github.com \\ --docker-username = <YOUR_GITHUB_USERNAME> \\ --docker-password = <YOUR_GITHUB_PASSWORD> $ oc secrets link default <SECRET_NAME> --for = pull \\ --namespace = <YOUR_OPENSHIFT_PROJECT_NAME> OpenShift \u00b6 First you need to log in to your OpenShift cluster and its image registry: $ docker login -u openshift -p $( oc whoami -t ) <registry_ip>:<port> $ oc login $ oc project Using project \"inveniordm\" on server \"<registry_ip>:<port>\". Then, find your docker image and tag it with the url of your OpenShift registry: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB $ docker tag demo-inveniordm <registry_ip>:<port>/inveniordm/demo-inveniordm:latest Project name Note that inveniordm is the name of the OpenShift project we are using. Its value should be the one returned by the oc project command. Therefore the tag is: <registry_ip>:<port>/<project_name>/<name_of_your_image>:<version> Check that it was tagged correctly: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB <registry_ip>:<port>/inveniordm/demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB Finally push it to the image registry of OpenShift: $ docker push <registry_ip>:<port>/inveniordm/demo-inveniordm:latest In order to use this image, you must set the following value in your values.yaml file (for both web and worker ): web: image: <registry_ip>:<port>/inveniordm/demo-inveniordm:rdm worker: image: <registry_ip>:<port>/inveniordm/demo-inveniordm:rdm","title":"Image registries"},{"location":"deployment/registries/#image-registries","text":"There are several places where you can store your docker image. In this section, we cover some of the most known ones. However, you can use any other of your preference. Build your image before hand In the following documentation we are assuming that you have already built your docker image. You can find documentation on how to do it here .","title":"Image registries"},{"location":"deployment/registries/#dockerhub","text":"To use docker hub, follow Docker's official documentation .","title":"DockerHub"},{"location":"deployment/registries/#github","text":"To store your image in GitHub you will need a repository. You can use your instance's one. For example: https://github/yourusername/rdmrepo . In addition, you will need to create an access token . This access token must have read:packages and write:packages scopes. The first step is to log in to GitHub's docker registry: $ docker login docker.pkg.github.com -u <YOU_GITHUB_USERNAME> -p <YOUR_GITHUB_TOKEN> Then, find your docker image and tag it with the url of your GitHub registry: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB $ docker tag demo-inveniordm docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest Project name Note that rdmrepo is the name of your GitHub repository. Therefore the tag is: docker.pkg.github.co/<your_github_user_name>/<your_github_repo_name>/<your_image_name>:<version> Check that it was tagged correctly: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest latest 9b6dd5ae6b48 17 hours ago 2.33GB The last step is to push your package to the GitHub registry: docker push docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest In order to use this image, you must set the following value in your values.yaml file (for both web and worker ): web: image: docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest worker: image: docker.pkg.github.com/yourusername/rdmrepo/rdmimage:latest Even if your project and/or image is public, GitHub requires you to be authenticated in order to pull your image. In OpenShift you can change the default pulling configuration so that it uses your token. You can do so as follows: $ oc create secret docker-registry <SECRET_NAME> \\ --docker-server = docker.pkg.github.com \\ --docker-username = <YOUR_GITHUB_USERNAME> \\ --docker-password = <YOUR_GITHUB_PASSWORD> $ oc secrets link default <SECRET_NAME> --for = pull \\ --namespace = <YOUR_OPENSHIFT_PROJECT_NAME>","title":"GitHub"},{"location":"deployment/registries/#openshift","text":"First you need to log in to your OpenShift cluster and its image registry: $ docker login -u openshift -p $( oc whoami -t ) <registry_ip>:<port> $ oc login $ oc project Using project \"inveniordm\" on server \"<registry_ip>:<port>\". Then, find your docker image and tag it with the url of your OpenShift registry: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB $ docker tag demo-inveniordm <registry_ip>:<port>/inveniordm/demo-inveniordm:latest Project name Note that inveniordm is the name of the OpenShift project we are using. Its value should be the one returned by the oc project command. Therefore the tag is: <registry_ip>:<port>/<project_name>/<name_of_your_image>:<version> Check that it was tagged correctly: $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB <registry_ip>:<port>/inveniordm/demo-inveniordm latest 9b6dd5ae6b48 17 hours ago 2.33GB Finally push it to the image registry of OpenShift: $ docker push <registry_ip>:<port>/inveniordm/demo-inveniordm:latest In order to use this image, you must set the following value in your values.yaml file (for both web and worker ): web: image: <registry_ip>:<port>/inveniordm/demo-inveniordm:rdm worker: image: <registry_ip>:<port>/inveniordm/demo-inveniordm:rdm","title":"OpenShift"},{"location":"deployment/services/","text":"Services \u00b6 Coming soon","title":"System components"},{"location":"deployment/services/#services","text":"Coming soon","title":"Services"},{"location":"develop/","text":"Getting Started \u00b6 You are now ready to learn how to create, customize and iterate on your own InvenioRDM instance. In fact, the previous section showed you the last step before deploying. You wouldn't want to fully containerize your application in the day to day of developing your instance. When working on your InvenioRDM application, you will want to use the commands and the workflow we explain in these pages. Initialize your file system \u00b6 We start by creating a new project in a different folder. We will just follow what we did in the Preview section . Feel free to use your own project name. invenio-cli init --flavour = RDM Initializing RDM application... project_name [My Site]: February Release 2 project_shortname [february-release-2]: project_site [february-release-2.com]: github_repo [february-release-2/february-release-2]: description [Invenio RDM February Release 2 Instance]: author_name [CERN]: author_email [info@february-release-2.com]: year [2020]: Select database: 1 - postgresql 2 - mysql 3 - sqlite Choose from 1, 2, 3 (1, 2, 3) [1]: Select elasticsearch: 1 - 7 2 - 6 Choose from 1, 2 (1, 2) [1]: Select file_storage: 1 - local 2 - S3 Choose from 1, 2 (1, 2) [1]: ------------------------------------------------------------------------------- Generating SSL certificate and private key for testing.... Can't load /home/youruser/.rnd into RNG 139989104693696:error:2406F079:random number generator:RAND_load_file:Cannot open file:../crypto/rand/randfile.c:88:Filename=/home/youruser/.rnd Generating a RSA private key ..................++++ ..................................++++ writing new private key to 'docker/nginx/test.key' ----- ------------------------------------------------------------------------------- Creating logs directory... Notes and Known Issues For now, the only available flavour is RDM (Research Data Management). In the future, there will be others, for example ILS (Integrated Library System). You may be prompted with You've downloaded /home/<username>/.cookiecutters/cookiecutter-invenio-rdm before. Is it okay to delete and re-download it? [yes]: . Press [Enter] in that case. This will download the latest cookiecutter template. Some OpenSSL versions display an error message when obtaining random numbers, but this has no incidence (as far as we can tell) on functionality. We are investigating a possible solution to raise less eyebrows for appearance sake.","title":"Getting Started"},{"location":"develop/#getting-started","text":"You are now ready to learn how to create, customize and iterate on your own InvenioRDM instance. In fact, the previous section showed you the last step before deploying. You wouldn't want to fully containerize your application in the day to day of developing your instance. When working on your InvenioRDM application, you will want to use the commands and the workflow we explain in these pages.","title":"Getting Started"},{"location":"develop/#initialize-your-file-system","text":"We start by creating a new project in a different folder. We will just follow what we did in the Preview section . Feel free to use your own project name. invenio-cli init --flavour = RDM Initializing RDM application... project_name [My Site]: February Release 2 project_shortname [february-release-2]: project_site [february-release-2.com]: github_repo [february-release-2/february-release-2]: description [Invenio RDM February Release 2 Instance]: author_name [CERN]: author_email [info@february-release-2.com]: year [2020]: Select database: 1 - postgresql 2 - mysql 3 - sqlite Choose from 1, 2, 3 (1, 2, 3) [1]: Select elasticsearch: 1 - 7 2 - 6 Choose from 1, 2 (1, 2) [1]: Select file_storage: 1 - local 2 - S3 Choose from 1, 2 (1, 2) [1]: ------------------------------------------------------------------------------- Generating SSL certificate and private key for testing.... Can't load /home/youruser/.rnd into RNG 139989104693696:error:2406F079:random number generator:RAND_load_file:Cannot open file:../crypto/rand/randfile.c:88:Filename=/home/youruser/.rnd Generating a RSA private key ..................++++ ..................................++++ writing new private key to 'docker/nginx/test.key' ----- ------------------------------------------------------------------------------- Creating logs directory... Notes and Known Issues For now, the only available flavour is RDM (Research Data Management). In the future, there will be others, for example ILS (Integrated Library System). You may be prompted with You've downloaded /home/<username>/.cookiecutters/cookiecutter-invenio-rdm before. Is it okay to delete and re-download it? [yes]: . Press [Enter] in that case. This will download the latest cookiecutter template. Some OpenSSL versions display an error message when obtaining random numbers, but this has no incidence (as far as we can tell) on functionality. We are investigating a possible solution to raise less eyebrows for appearance sake.","title":"Initialize your file system"},{"location":"develop/cleanup/","text":"Cleanup after you \u00b6 Stop the instance \u00b6 We have reached the end of this journey, we are going to stop the instance. This will NOT destroy images, containers or volumes i.e. your data will be preserved. ^C Stopping server and worker... Server and worker stopped... Destroy the instance \u00b6 If you want to get to a clean state with no images, containers or volumes, then destroy the instance. This WILL permanently erase your volume data (database and Elasticsearch indices). It destroys the images, containers and volumes defined in the february-release-2/docker-compose.full.yml . After stopping the application per above, destroy it: invenio-cli destroy TODO: Revisit destroy command...","title":"Cleanup"},{"location":"develop/cleanup/#cleanup-after-you","text":"","title":"Cleanup after you"},{"location":"develop/cleanup/#stop-the-instance","text":"We have reached the end of this journey, we are going to stop the instance. This will NOT destroy images, containers or volumes i.e. your data will be preserved. ^C Stopping server and worker... Server and worker stopped...","title":"Stop the instance"},{"location":"develop/cleanup/#destroy-the-instance","text":"If you want to get to a clean state with no images, containers or volumes, then destroy the instance. This WILL permanently erase your volume data (database and Elasticsearch indices). It destroys the images, containers and volumes defined in the february-release-2/docker-compose.full.yml . After stopping the application per above, destroy it: invenio-cli destroy TODO: Revisit destroy command...","title":"Destroy the instance"},{"location":"develop/config/","text":"Configuration \u00b6 You can configure your InvenioRDM instance to best suit your needs. The invenio.cfg file, overrides the config.py variables provided by Invenio modules and their dependencies. We will use configuring permissions as an example of how to configure your application. For the purpose of this example, we will only allow super users to create records through the REST API. To do so, we define our own permission policy. Open the invenio.cfg file with your favorite editor. We will use vim to avoid emacs and other wars ;). vim invenio.cfg Let's add the following to the file: # imports at the top... from invenio_rdm_records.permissions import RDMRecordPermissionPolicy from invenio_records_permissions.generators import SuperUser # ... # At the bottom # Our custom Permission Policy class MyRecordPermissionPolicy ( RDMRecordPermissionPolicy ): can_create = [ SuperUser ()] RECORDS_PERMISSIONS_RECORD_POLICY = MyRecordPermissionPolicy And stop and start the server: ^C Stopping server and worker... Server and worker stopped... invenio-cli run Warning Changes to invenio.cfg MUST be accompanied by a restart to be picked up. This only restarts the server; it does not destroy any data. When we set RECORDS_PERMISSIONS_RECORD_POLICY = MyRecordPermissionPolicy , we are overriding RECORDS_PERMISSIONS_RECORD_POLICY provided by invenio-records-permissions . You will note that invenio.cfg is really just a Python module. How convenient! Pro tip : You can type can_create = [] to achieve the same effect; any empty permission list only allows super users. That's it configuration-wise. If we try to create a record through the API, your instance will check if you are a super user before allowing you. The same approach to configuration holds for any other setting you would like to override. Did the changes work? We are going to try to create a new record: curl -k -XPOST -H \"Content-Type: application/json\" https://localhost:5000/api/records/ -d '{ \"_access\": { \"metadata_restricted\": false, \"files_restricted\": false }, \"_owners\": [1], \"_created_by\": 1, \"access_right\": \"open\", \"resource_type\": { \"type\": \"image\", \"subtype\": \"photo\" }, \"identifiers\": [ { \"identifier\": \"10.9999/rdm.0\", \"scheme\": \"DOI\" } ], \"creators\": [ { \"name\": \"Marcus Junius Brutus\", \"type\": \"Personal\", \"given_name\": \"Marcus\", \"family_name\": \"Brutus\", \"identifiers\": [ { \"identifier\": \"9999-9999-9999-9990\", \"scheme\": \"Orcid\" } ], \"affiliations\": [ { \"name\": \"Entity One\", \"identifier\": \"entity-one\", \"scheme\": \"entity-id-scheme\" } ] } ], \"titles\": [ { \"title\": \"A permission story\", \"type\": \"Other\", \"lang\": \"eng\" } ], \"descriptions\": [ { \"description\": \"A story about how permissions work.\", \"type\": \"Abstract\", \"lang\": \"eng\" } ], \"community\": { \"primary\": \"Maincom\", \"secondary\": [\"Subcom One\", \"Subcom Two\"] }, \"licenses\": [ { \"license\": \"Berkeley Software Distribution 3\", \"uri\": \"https://opensource.org/licenses/BSD-3-Clause\", \"identifier\": \"BSD-3\", \"scheme\": \"BSD-3\" } ] }' As you can see, the server could not know if we are authenticated/superuser and rejected us: { \"message\" : \"The server could not verify that you are authorized to access the URL requested. You either supplied the wrong credentials (e.g. a bad password), or your browser doesn't understand how to supply the credentials required.\" , \"status\" : 401 } Let's create a user with the right permission, generate her token and use the API with it. pipenv run invenio users create admin@test.ch --password = 123456 --active pipenv run invenio roles add admin@test.ch admin Login through the browser as admin@test.ch with password 123456 . Then in the dropdown menu of the username (top-right), select Applications . Then click on New token , name your token and click Create . Copy this token (we will refer to it as <your token> ) and put it in the API call as such: curl -k -XPOST -H \"Authorization:Bearer <your token>\" -H \"Content-Type: application/json\" https://localhost:5000/api/records/ -d '{ ...<fill with the above>... }' And it works! That's because InvenioRDM creates an admin role with super user access permissions when initially setting up the database. Above, we set admin@test.ch to be an admin, so that user can create records. Revert the changes in invenio.cfg and restart the server to get back to where we were.","title":"Configuration"},{"location":"develop/config/#configuration","text":"You can configure your InvenioRDM instance to best suit your needs. The invenio.cfg file, overrides the config.py variables provided by Invenio modules and their dependencies. We will use configuring permissions as an example of how to configure your application. For the purpose of this example, we will only allow super users to create records through the REST API. To do so, we define our own permission policy. Open the invenio.cfg file with your favorite editor. We will use vim to avoid emacs and other wars ;). vim invenio.cfg Let's add the following to the file: # imports at the top... from invenio_rdm_records.permissions import RDMRecordPermissionPolicy from invenio_records_permissions.generators import SuperUser # ... # At the bottom # Our custom Permission Policy class MyRecordPermissionPolicy ( RDMRecordPermissionPolicy ): can_create = [ SuperUser ()] RECORDS_PERMISSIONS_RECORD_POLICY = MyRecordPermissionPolicy And stop and start the server: ^C Stopping server and worker... Server and worker stopped... invenio-cli run Warning Changes to invenio.cfg MUST be accompanied by a restart to be picked up. This only restarts the server; it does not destroy any data. When we set RECORDS_PERMISSIONS_RECORD_POLICY = MyRecordPermissionPolicy , we are overriding RECORDS_PERMISSIONS_RECORD_POLICY provided by invenio-records-permissions . You will note that invenio.cfg is really just a Python module. How convenient! Pro tip : You can type can_create = [] to achieve the same effect; any empty permission list only allows super users. That's it configuration-wise. If we try to create a record through the API, your instance will check if you are a super user before allowing you. The same approach to configuration holds for any other setting you would like to override. Did the changes work? We are going to try to create a new record: curl -k -XPOST -H \"Content-Type: application/json\" https://localhost:5000/api/records/ -d '{ \"_access\": { \"metadata_restricted\": false, \"files_restricted\": false }, \"_owners\": [1], \"_created_by\": 1, \"access_right\": \"open\", \"resource_type\": { \"type\": \"image\", \"subtype\": \"photo\" }, \"identifiers\": [ { \"identifier\": \"10.9999/rdm.0\", \"scheme\": \"DOI\" } ], \"creators\": [ { \"name\": \"Marcus Junius Brutus\", \"type\": \"Personal\", \"given_name\": \"Marcus\", \"family_name\": \"Brutus\", \"identifiers\": [ { \"identifier\": \"9999-9999-9999-9990\", \"scheme\": \"Orcid\" } ], \"affiliations\": [ { \"name\": \"Entity One\", \"identifier\": \"entity-one\", \"scheme\": \"entity-id-scheme\" } ] } ], \"titles\": [ { \"title\": \"A permission story\", \"type\": \"Other\", \"lang\": \"eng\" } ], \"descriptions\": [ { \"description\": \"A story about how permissions work.\", \"type\": \"Abstract\", \"lang\": \"eng\" } ], \"community\": { \"primary\": \"Maincom\", \"secondary\": [\"Subcom One\", \"Subcom Two\"] }, \"licenses\": [ { \"license\": \"Berkeley Software Distribution 3\", \"uri\": \"https://opensource.org/licenses/BSD-3-Clause\", \"identifier\": \"BSD-3\", \"scheme\": \"BSD-3\" } ] }' As you can see, the server could not know if we are authenticated/superuser and rejected us: { \"message\" : \"The server could not verify that you are authorized to access the URL requested. You either supplied the wrong credentials (e.g. a bad password), or your browser doesn't understand how to supply the credentials required.\" , \"status\" : 401 } Let's create a user with the right permission, generate her token and use the API with it. pipenv run invenio users create admin@test.ch --password = 123456 --active pipenv run invenio roles add admin@test.ch admin Login through the browser as admin@test.ch with password 123456 . Then in the dropdown menu of the username (top-right), select Applications . Then click on New token , name your token and click Create . Copy this token (we will refer to it as <your token> ) and put it in the API call as such: curl -k -XPOST -H \"Authorization:Bearer <your token>\" -H \"Content-Type: application/json\" https://localhost:5000/api/records/ -d '{ ...<fill with the above>... }' And it works! That's because InvenioRDM creates an admin role with super user access permissions when initially setting up the database. Above, we set admin@test.ch to be an admin, so that user can create records. Revert the changes in invenio.cfg and restart the server to get back to where we were.","title":"Configuration"},{"location":"develop/customize/","text":"Customization \u00b6 As we just saw, overriding configured values is an easy and common way of customizing your instance to your needs. Sometimes, however, you need to provide custom files too: logos, templates... We show how to perform these custom changes. Update the logo \u00b6 We are going to change the logo. Take an svg file and copy it to your local static files. You can use the invenio color logo : cp ./path/to/new/color/logo.svg static/images/logo.svg Then, use the update command: invenio-cli update --no-install-js # Summarized output Collecting statics and assets... Collect static from blueprints. Created webpack project. Copying project statics and assets... Symlinking assets/... Building assets... Built webpack project. Passing the --no-install-js option, skips re-installation of JS dependencies. Go to the browser https://localhost:5000/ or refresh the page. And voil\u00e0! The logo has been changed! That evil cache If you do not see it changing, check in an incognito window; the browser might have cached the logo. Change colors \u00b6 You might also be wondering: How do I change the colors so I can make my instance look like my institution's theme? We are going to change the top header section in the frontpage to apply our custom background color. Open the assets/scss/<your instance shortname>/variables.scss file and edit it as below: $navbar_background_image : unset ; $navbar_background_color : #000000 ; // Note this hex value is an example. Choose yours. Then, run the invenio-cli update command as above and refresh the page! You should be able to see your top header's color changed! You can find all the available styling variables that you can change here . Change search results \u00b6 Changing how your results are presented in the search page is also something quite common. We are going to update the search result template so we can show more text in the result's description. Create a file called ResultsItemTemplate.jsx inside assets/templates/search folder and then edit it as below: import React from 'react' ; import { Item } from 'semantic-ui-react' ; import _truncate from 'lodash/truncate' ; export function ResultsItemTemplate ( record , index ) { return ( < Item key = { index } href = { `/records/ ${ record . id } ` } > < Item . Content > < Item . Header > { record . metadata . titles [ 0 ]. title } < /Item.Header> < Item . Description > { _truncate ( record . metadata . descriptions [ 0 ]. description , { length : 400 })} < /Item.Description> < /Item.Content> < /Item> ) }; Then, run the invenio-cli update command as above and refresh the page! You should be able to see more text in each result's description! You can find all the available templates here . Change the record landing page \u00b6 When you click on a search result, you navigate in the details page of a specific record. This section shows you how to change the way the information is displayed in the details page. We are going to configure our instance to use our template for displaying the information in the record's landing page. Open the invenio.cfg file and add the below: from invenio_rdm_records.config import RECORDS_UI_ENDPOINTS RECORDS_UI_ENDPOINTS [ 'recid' ] . update ( template = 'my_record_landing_page.html' ) Then, we create a file my_record_landing_page.html inside the templates folder and edit it as below: {% - extends 'invenio_rdm_records/record_landing_page.html' %} {% - block page_body %} <!-- // Paste your code here --> {% - endblock page_body %} Inside the page_body block you can restructure the page as you want! You can check the default record landing page template here . Since we modified invenio.cfg , we need to re-start the server to see our changes take effect: ^C Stopping server and worker... Server and worker stopped... invenio-cli run Change functionality \u00b6 Need further customizations? Have you thought of creating your own extensions? How to make an extension and add it to your InvenioRDM instance is explained in the Extensions section .","title":"Customization"},{"location":"develop/customize/#customization","text":"As we just saw, overriding configured values is an easy and common way of customizing your instance to your needs. Sometimes, however, you need to provide custom files too: logos, templates... We show how to perform these custom changes.","title":"Customization"},{"location":"develop/customize/#update-the-logo","text":"We are going to change the logo. Take an svg file and copy it to your local static files. You can use the invenio color logo : cp ./path/to/new/color/logo.svg static/images/logo.svg Then, use the update command: invenio-cli update --no-install-js # Summarized output Collecting statics and assets... Collect static from blueprints. Created webpack project. Copying project statics and assets... Symlinking assets/... Building assets... Built webpack project. Passing the --no-install-js option, skips re-installation of JS dependencies. Go to the browser https://localhost:5000/ or refresh the page. And voil\u00e0! The logo has been changed! That evil cache If you do not see it changing, check in an incognito window; the browser might have cached the logo.","title":"Update the logo"},{"location":"develop/customize/#change-colors","text":"You might also be wondering: How do I change the colors so I can make my instance look like my institution's theme? We are going to change the top header section in the frontpage to apply our custom background color. Open the assets/scss/<your instance shortname>/variables.scss file and edit it as below: $navbar_background_image : unset ; $navbar_background_color : #000000 ; // Note this hex value is an example. Choose yours. Then, run the invenio-cli update command as above and refresh the page! You should be able to see your top header's color changed! You can find all the available styling variables that you can change here .","title":"Change colors"},{"location":"develop/customize/#change-search-results","text":"Changing how your results are presented in the search page is also something quite common. We are going to update the search result template so we can show more text in the result's description. Create a file called ResultsItemTemplate.jsx inside assets/templates/search folder and then edit it as below: import React from 'react' ; import { Item } from 'semantic-ui-react' ; import _truncate from 'lodash/truncate' ; export function ResultsItemTemplate ( record , index ) { return ( < Item key = { index } href = { `/records/ ${ record . id } ` } > < Item . Content > < Item . Header > { record . metadata . titles [ 0 ]. title } < /Item.Header> < Item . Description > { _truncate ( record . metadata . descriptions [ 0 ]. description , { length : 400 })} < /Item.Description> < /Item.Content> < /Item> ) }; Then, run the invenio-cli update command as above and refresh the page! You should be able to see more text in each result's description! You can find all the available templates here .","title":"Change search results"},{"location":"develop/customize/#change-the-record-landing-page","text":"When you click on a search result, you navigate in the details page of a specific record. This section shows you how to change the way the information is displayed in the details page. We are going to configure our instance to use our template for displaying the information in the record's landing page. Open the invenio.cfg file and add the below: from invenio_rdm_records.config import RECORDS_UI_ENDPOINTS RECORDS_UI_ENDPOINTS [ 'recid' ] . update ( template = 'my_record_landing_page.html' ) Then, we create a file my_record_landing_page.html inside the templates folder and edit it as below: {% - extends 'invenio_rdm_records/record_landing_page.html' %} {% - block page_body %} <!-- // Paste your code here --> {% - endblock page_body %} Inside the page_body block you can restructure the page as you want! You can check the default record landing page template here . Since we modified invenio.cfg , we need to re-start the server to see our changes take effect: ^C Stopping server and worker... Server and worker stopped... invenio-cli run","title":"Change the record landing page"},{"location":"develop/customize/#change-functionality","text":"Need further customizations? Have you thought of creating your own extensions? How to make an extension and add it to your InvenioRDM instance is explained in the Extensions section .","title":"Change functionality"},{"location":"develop/install_locally/","text":"Install Locally \u00b6 In the Preview Section , we have been running all of the application in docker containers. This saves you the trouble of installing the instance on your host and gets something visible fast. Now, we will run the application locally and the database and other services in containers. It's the best compromise between getting up and running with relevant services fast, while allowing you to iterate on your local instance quickly. Before going on, let's move into the project directory: cd february-release-2 To run the application locally, we will need to install it and its dependencies first. We do not need to add --pre , since we do not have to install any alpha releases. Nonetheless, this option is still available if you need it. Be patient, it might take some time to build. invenio-cli install # Summarized output Installing python dependencies... Symlinking invenio.cfg... Symlinking templates/... Collecting statics and assets... Installing js dependencies... Copying project statics and assets... Symlinking assets/... Building assets... As a result, the Python dependencies for the project have been installed in a new virtualenv for the application and many of the files in your project directory have been symlinked inside it. Setup the database, Elasticsearch, Redis and RabbitMQ \u00b6 We need to initialize the database, the indices and so on. For this, we use the services command. The first time this command is run, the services will be setup correctly and the containers running them will even restart upon a reboot of your machine. If you stop and restart those containers, your data will still be there. Upon running this command again, the initial setup is skipped. invenio-cli services Making sure containers are up... Creating network \"february-release-2_default\" with the default driver Creating february-release-2_cache_1 ... done Creating february-release-2_es_1 ... done Creating february-release-2_db_1 ... done Creating february-release-2_mq_1 ... done Creating database postgresql+psycopg2://february-release-2:february-release-2@localhost/february-release-2 Creating all tables! INFO [alembic.runtime.migration] Context impl PostgresqlImpl. INFO [alembic.runtime.migration] Will assume transactional DDL. Created all tables! Location default-location /your/path/to/var/instance/data as default True created Role \"admin\" created successfully. Creating indexes... Putting templates... Note You will notice Making sure containers are up... like the above and a 30s delay in the output of the commands we cover next. This is because they make doubly sure the containers are running. In future releases, we will reduce this delay. In case you want to wipe out the data that was there (say to start fresh), you can use --force and nuke the content! invenio-cli services --force Making sure containers are up... february-release-2_mq_1 is up-to-date february-release-2_db_1 is up-to-date february-release-2_cache_1 is up-to-date february-release-2_es_1 is up-to-date Cache cleared Destroying database postgresql+psycopg2://february-release-2:february-release-2@localhost/february-release-2 Destroying indexes... Indexing queue has been initialized. Indexing queue has been purged. Creating database postgresql+psycopg2://february-release-2:february-release-2@localhost/february-release-2 Creating all tables! [####################################] 100% INFO [alembic.runtime.migration] Context impl PostgresqlImpl. INFO [alembic.runtime.migration] Will assume transactional DDL. Created all tables! Location default-location /your/path/to/var/instance/data as default True created Role \"admin\" created successfully. Creating indexes... Putting templates... Known issues : The Elasticsearch container might crash due to lack of memory. One solution is to increase the maximum allowed allocation per process (See more here ). Solving this issue depends on your OS: On Linux, add the following to /etc/sysctl.conf on your local machine (host machine): # Memory mapped max size set for ElasticSearch vm.max_map_count = 262144 On macOS, do the following: screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty # and in the shell sysctl -w vm.max_map_count = 262144 Populate DB \u00b6 Let's add some content so you can interact a bit with the instance. For this you will generate 10 random demo records, using the demo command: invenio-cli demo --local Making sure containers are up... february-release-2_mq_1 is up-to-date february-release-2_db_1 is up-to-date february-release-2_cache_1 is up-to-date february-release-2_es_1 is up-to-date Creating demo records... Created records! We are ready to run it in the next section.","title":"Install Locally"},{"location":"develop/install_locally/#install-locally","text":"In the Preview Section , we have been running all of the application in docker containers. This saves you the trouble of installing the instance on your host and gets something visible fast. Now, we will run the application locally and the database and other services in containers. It's the best compromise between getting up and running with relevant services fast, while allowing you to iterate on your local instance quickly. Before going on, let's move into the project directory: cd february-release-2 To run the application locally, we will need to install it and its dependencies first. We do not need to add --pre , since we do not have to install any alpha releases. Nonetheless, this option is still available if you need it. Be patient, it might take some time to build. invenio-cli install # Summarized output Installing python dependencies... Symlinking invenio.cfg... Symlinking templates/... Collecting statics and assets... Installing js dependencies... Copying project statics and assets... Symlinking assets/... Building assets... As a result, the Python dependencies for the project have been installed in a new virtualenv for the application and many of the files in your project directory have been symlinked inside it.","title":"Install Locally"},{"location":"develop/install_locally/#setup-the-database-elasticsearch-redis-and-rabbitmq","text":"We need to initialize the database, the indices and so on. For this, we use the services command. The first time this command is run, the services will be setup correctly and the containers running them will even restart upon a reboot of your machine. If you stop and restart those containers, your data will still be there. Upon running this command again, the initial setup is skipped. invenio-cli services Making sure containers are up... Creating network \"february-release-2_default\" with the default driver Creating february-release-2_cache_1 ... done Creating february-release-2_es_1 ... done Creating february-release-2_db_1 ... done Creating february-release-2_mq_1 ... done Creating database postgresql+psycopg2://february-release-2:february-release-2@localhost/february-release-2 Creating all tables! INFO [alembic.runtime.migration] Context impl PostgresqlImpl. INFO [alembic.runtime.migration] Will assume transactional DDL. Created all tables! Location default-location /your/path/to/var/instance/data as default True created Role \"admin\" created successfully. Creating indexes... Putting templates... Note You will notice Making sure containers are up... like the above and a 30s delay in the output of the commands we cover next. This is because they make doubly sure the containers are running. In future releases, we will reduce this delay. In case you want to wipe out the data that was there (say to start fresh), you can use --force and nuke the content! invenio-cli services --force Making sure containers are up... february-release-2_mq_1 is up-to-date february-release-2_db_1 is up-to-date february-release-2_cache_1 is up-to-date february-release-2_es_1 is up-to-date Cache cleared Destroying database postgresql+psycopg2://february-release-2:february-release-2@localhost/february-release-2 Destroying indexes... Indexing queue has been initialized. Indexing queue has been purged. Creating database postgresql+psycopg2://february-release-2:february-release-2@localhost/february-release-2 Creating all tables! [####################################] 100% INFO [alembic.runtime.migration] Context impl PostgresqlImpl. INFO [alembic.runtime.migration] Will assume transactional DDL. Created all tables! Location default-location /your/path/to/var/instance/data as default True created Role \"admin\" created successfully. Creating indexes... Putting templates... Known issues : The Elasticsearch container might crash due to lack of memory. One solution is to increase the maximum allowed allocation per process (See more here ). Solving this issue depends on your OS: On Linux, add the following to /etc/sysctl.conf on your local machine (host machine): # Memory mapped max size set for ElasticSearch vm.max_map_count = 262144 On macOS, do the following: screen ~/Library/Containers/com.docker.docker/Data/com.docker.driver.amd64-linux/tty # and in the shell sysctl -w vm.max_map_count = 262144","title":"Setup the database, Elasticsearch, Redis and RabbitMQ"},{"location":"develop/install_locally/#populate-db","text":"Let's add some content so you can interact a bit with the instance. For this you will generate 10 random demo records, using the demo command: invenio-cli demo --local Making sure containers are up... february-release-2_mq_1 is up-to-date february-release-2_db_1 is up-to-date february-release-2_cache_1 is up-to-date february-release-2_es_1 is up-to-date Creating demo records... Created records! We are ready to run it in the next section.","title":"Populate DB"},{"location":"develop/run/","text":"Run it! \u00b6 Once the application is installed locally and the services are running, our application just needs to run. For that, the run command is executed. invenio-cli run # Summarized output Making sure containers are up... Starting celery worker... Starting up local (development) server... Instance running! Visit https://localhost:5000 Use your instance: have fun! \u00b6 Are we done? Yes, let the fun begin... List records \u00b6 Let's see what is in the instance by querying the API. Using another terminal: curl -k -XGET https://localhost:5000/api/records/ | python3 -m json.tool { \"aggregations\" : { \"access_right\" : { \"buckets\" : [ { \"doc_count\" : 10 , \"key\" : \"open\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 }, \"resource_type\" : { \"buckets\" : [ { \"doc_count\" : 10 , \"key\" : \"image\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 } }, \"hits\" : { \"hits\" : [ { \"created\" : \"2020-02-25T15:54:52.127129+00:00\" , \"updated\" : \"2020-02-25T15:54:52.127134+00:00\" , \"revision\" : 0 , \"id\" : \"zgxnf-z7n12\" , \"links\" : { \"files\" : \"https://localhost:5000/api/records/zgxnf-z7n12/files\" , \"self\" : \"https://localhost:5000/api/records/zgxnf-z7n12\" }, \"metadata\" : { \"_access\" : { \"files_restricted\" : false , \"metadata_restricted\" : false }, \"_created_by\" : 2 , \"_default_preview\" : \"previewer one\" , \"_internal_notes\" : [ { \"note\" : \"RDM record\" , \"timestamp\" : \"1981-12-29\" , \"user\" : \"inveniouser\" } ], \"_owners\" : [ 1 ], \"access_right\" : \"open\" , \"community\" : { \"primary\" : \"Maincom\" , \"secondary\" : [ \"Subcom One\" , \"Subcom Two\" ] }, \"contact\" : \"info@inveniosoftware.org\" , \"contributors\" : [ { \"affiliations\" : [ { \"identifier\" : \"entity-one\" , \"name\" : \"Doyle, Miller and Williams\" , \"scheme\" : \"entity-id-scheme\" } ], \"identifiers\" : [ { \"identifier\" : \"9999-9999-9999-9998\" , \"scheme\" : \"Orcid\" } ], \"name\" : \"Gina Brown\" , \"role\" : \"RightsHolder\" , \"type\" : \"Personal\" } ], \"creators\" : [ { \"affiliations\" : [ { \"identifier\" : \"entity-one\" , \"name\" : \"Pacheco Ltd\" , \"scheme\" : \"entity-id-scheme\" } ], \"identifiers\" : [ { \"identifier\" : \"9999-9999-9999-9999\" , \"scheme\" : \"Orcid\" } ], \"name\" : \"Christina Wright\" , \"type\" : \"Personal\" } ], \"dates\" : [ { \"description\" : \"Random test date\" , \"start\" : \"1989-07-06\" , \"type\" : \"Other\" } ], \"descriptions\" : [ { \"description\" : \"This description has been shortened.\" , \"lang\" : \"eng\" , \"type\" : \"Abstract\" } ], \"embargo_date\" : \"1997-12-01\" , \"identifiers\" : [ { \"identifier\" : \"10.9999/rdm.9999999\" , \"scheme\" : \"DOI\" }, { \"identifier\" : \"9999.99999\" , \"scheme\" : \"arXiv\" } ], \"language\" : \"eng\" , \"licenses\" : [ { \"identifier\" : \"BSD-3\" , \"license\" : \"Berkeley Software Distribution 3\" , \"scheme\" : \"BSD-3\" , \"uri\" : \"https://opensource.org/licenses/BSD-3-Clause\" } ], \"locations\" : [ { \"description\" : \"Random place on land for random coordinates...\" , \"place\" : \"Sector 6\" , \"point\" : { \"lat\" : 82.3308575 , \"lon\" : -129.47999 } } ], \"publication_date\" : \"1970-12-05\" , \"recid\" : \"zgxnf-z7n12\" , \"references\" : [ { \"identifier\" : \"9999.99988\" , \"reference_string\" : \"Reference to something et al.\" , \"scheme\" : \"GRID\" } ], \"related_identifiers\" : [ { \"identifier\" : \"10.9999/rdm.9999988\" , \"relation_type\" : \"Requires\" , \"resource_type\" : { \"subtype\" : \"photo\" , \"type\" : \"image\" }, \"scheme\" : \"DOI\" } ], \"resource_type\" : { \"subtype\" : \"photo\" , \"type\" : \"image\" }, \"subjects\" : [ { \"identifier\" : \"subj-1\" , \"scheme\" : \"no-scheme\" , \"subject\" : \"Romans\" } ], \"titles\" : [ { \"lang\" : \"eng\" , \"title\" : \"Hicks and Sons's gallery\" , \"type\" : \"Other\" } ], \"version\" : \"v0.0.1\" } }, ... ] } } Note : Output shortened for readability. Your records will be different because they are generated randomly. Pro Tip : You can use jq for color highlighting: curl -k -XGET https://localhost:5000/api/records/ | jq . Create records \u00b6 You can create a new record using the API: curl -k -XPOST -H \"Content-Type: application/json\" https://localhost:5000/api/records/ -d '{ \"_access\": { \"metadata_restricted\": false, \"files_restricted\": false }, \"_owners\": [1], \"_created_by\": 1, \"access_right\": \"open\", \"resource_type\": { \"type\": \"image\", \"subtype\": \"photo\" }, \"identifiers\": [ { \"identifier\": \"10.9999/rdm.9999999\", \"scheme\": \"DOI\" }, { \"identifier\": \"9999.99999\", \"scheme\": \"arXiv\" } ], \"creators\": [ { \"name\": \"Julio Cesar\", \"type\": \"Personal\", \"given_name\": \"Julio\", \"family_name\": \"Cesar\", \"identifiers\": [ { \"identifier\": \"9999-9999-9999-9999\", \"scheme\": \"Orcid\" } ], \"affiliations\": [ { \"name\": \"Entity One\", \"identifier\": \"entity-one\", \"scheme\": \"entity-id-scheme\" } ] } ], \"titles\": [ { \"title\": \"A Romans story\", \"type\": \"Other\", \"lang\": \"eng\" } ], \"descriptions\": [ { \"description\": \"A story on how Julio Cesar relates to Gladiator.\", \"type\": \"Abstract\", \"lang\": \"eng\" } ], \"community\": { \"primary\": \"Maincom\", \"secondary\": [\"Subcom One\", \"Subcom Two\"] }, \"licenses\": [ { \"license\": \"Berkeley Software Distribution 3\", \"uri\": \"https://opensource.org/licenses/BSD-3-Clause\", \"identifier\": \"BSD-3\", \"scheme\": \"BSD-3\" } ] }' And then search for it: curl -k -XGET https://localhost:5000/api/records/?q = Gladiator | python3 -m json.tool { \"aggregations\" : { \"access_right\" : { \"buckets\" : [ { \"doc_count\" : 1 , \"key\" : \"open\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 }, \"resource_type\" : { \"buckets\" : [ { \"doc_count\" : 1 , \"key\" : \"image\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 } }, \"hits\" : { \"hits\" : [ { \"created\" : \"2020-02-26T15:46:55.000116+00:00\" , \"id\" : \"8wtcp-1bs44\" , \"links\" : { \"files\" : \"https://localhost:5000/api/records/8wtcp-1bs44/files\" , \"self\" : \"https://localhost:5000/api/records/8wtcp-1bs44\" }, \"metadata\" : { \"_access\" : { \"files_restricted\" : false , \"metadata_restricted\" : false }, \"_created_by\" : 1 , \"_owners\" : [ 1 ], \"access_right\" : \"open\" , \"community\" : { \"primary\" : \"Maincom\" , \"secondary\" : [ \"Subcom One\" , \"Subcom Two\" ] }, \"creators\" : [ { \"affiliations\" : [ { \"identifier\" : \"entity-one\" , \"name\" : \"Entity One\" , \"scheme\" : \"entity-id-scheme\" } ], \"family_name\" : \"Cesar\" , \"given_name\" : \"Julio\" , \"identifiers\" : [ { \"identifier\" : \"9999-9999-9999-9999\" , \"scheme\" : \"Orcid\" } ], \"name\" : \"Julio Cesar\" , \"type\" : \"Personal\" } ], \"descriptions\" : [ { \"description\" : \"A story on how Julio Cesar relates to Gladiator.\" , \"lang\" : \"eng\" , \"type\" : \"Abstract\" } ], \"identifiers\" : [ { \"identifier\" : \"10.9999/rdm.9999999\" , \"scheme\" : \"DOI\" }, { \"identifier\" : \"9999.99999\" , \"scheme\" : \"arXiv\" } ], \"licenses\" : [ { \"identifier\" : \"BSD-3\" , \"license\" : \"Berkeley Software Distribution 3\" , \"scheme\" : \"BSD-3\" , \"uri\" : \"https://opensource.org/licenses/BSD-3-Clause\" } ], \"publication_date\" : \"2020-02-26\" , \"recid\" : \"8wtcp-1bs44\" , \"resource_type\" : { \"subtype\" : \"photo\" , \"type\" : \"image\" }, \"titles\" : [ { \"lang\" : \"eng\" , \"title\" : \"A Romans story\" , \"type\" : \"Other\" } ] }, \"revision\" : 0 , \"updated\" : \"2020-02-26T15:46:55.000119+00:00\" } ], \"total\" : 1 }, \"links\" : { \"self\" : \"https://localhost:5000/api/records/?sort=bestmatch&q=Gladiator&size=10&page=1\" } } Use your browser \u00b6 Alternatively, you can use the web UI. Navigate to https://localhost:5000 . Note that you might need to accept the SSL exception since it's using a test certificate. And visit the record page for the newly created record. You will see it has no files associated with it. Let's change that! Upload a file to a record \u00b6 For demonstration purposes, we will attach this scientific photo: by Ian Matyssik . Save it as snow_doge.jpg in your current directory. Then upload it to the record: Change the recid Change pv1dx-rwa61 in the URLs below for the recid of your record. curl -k -X PUT https://localhost:5000/api/records/pv1dx-rwa61/files/snow_doge.jpg -H \"Content-Type: application/octet-stream\" --data-binary @snow_doge.jpg This file can then be previewed on the record page and even downloaded.","title":"Run"},{"location":"develop/run/#run-it","text":"Once the application is installed locally and the services are running, our application just needs to run. For that, the run command is executed. invenio-cli run # Summarized output Making sure containers are up... Starting celery worker... Starting up local (development) server... Instance running! Visit https://localhost:5000","title":"Run it!"},{"location":"develop/run/#use-your-instance-have-fun","text":"Are we done? Yes, let the fun begin...","title":"Use your instance: have fun!"},{"location":"develop/run/#list-records","text":"Let's see what is in the instance by querying the API. Using another terminal: curl -k -XGET https://localhost:5000/api/records/ | python3 -m json.tool { \"aggregations\" : { \"access_right\" : { \"buckets\" : [ { \"doc_count\" : 10 , \"key\" : \"open\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 }, \"resource_type\" : { \"buckets\" : [ { \"doc_count\" : 10 , \"key\" : \"image\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 } }, \"hits\" : { \"hits\" : [ { \"created\" : \"2020-02-25T15:54:52.127129+00:00\" , \"updated\" : \"2020-02-25T15:54:52.127134+00:00\" , \"revision\" : 0 , \"id\" : \"zgxnf-z7n12\" , \"links\" : { \"files\" : \"https://localhost:5000/api/records/zgxnf-z7n12/files\" , \"self\" : \"https://localhost:5000/api/records/zgxnf-z7n12\" }, \"metadata\" : { \"_access\" : { \"files_restricted\" : false , \"metadata_restricted\" : false }, \"_created_by\" : 2 , \"_default_preview\" : \"previewer one\" , \"_internal_notes\" : [ { \"note\" : \"RDM record\" , \"timestamp\" : \"1981-12-29\" , \"user\" : \"inveniouser\" } ], \"_owners\" : [ 1 ], \"access_right\" : \"open\" , \"community\" : { \"primary\" : \"Maincom\" , \"secondary\" : [ \"Subcom One\" , \"Subcom Two\" ] }, \"contact\" : \"info@inveniosoftware.org\" , \"contributors\" : [ { \"affiliations\" : [ { \"identifier\" : \"entity-one\" , \"name\" : \"Doyle, Miller and Williams\" , \"scheme\" : \"entity-id-scheme\" } ], \"identifiers\" : [ { \"identifier\" : \"9999-9999-9999-9998\" , \"scheme\" : \"Orcid\" } ], \"name\" : \"Gina Brown\" , \"role\" : \"RightsHolder\" , \"type\" : \"Personal\" } ], \"creators\" : [ { \"affiliations\" : [ { \"identifier\" : \"entity-one\" , \"name\" : \"Pacheco Ltd\" , \"scheme\" : \"entity-id-scheme\" } ], \"identifiers\" : [ { \"identifier\" : \"9999-9999-9999-9999\" , \"scheme\" : \"Orcid\" } ], \"name\" : \"Christina Wright\" , \"type\" : \"Personal\" } ], \"dates\" : [ { \"description\" : \"Random test date\" , \"start\" : \"1989-07-06\" , \"type\" : \"Other\" } ], \"descriptions\" : [ { \"description\" : \"This description has been shortened.\" , \"lang\" : \"eng\" , \"type\" : \"Abstract\" } ], \"embargo_date\" : \"1997-12-01\" , \"identifiers\" : [ { \"identifier\" : \"10.9999/rdm.9999999\" , \"scheme\" : \"DOI\" }, { \"identifier\" : \"9999.99999\" , \"scheme\" : \"arXiv\" } ], \"language\" : \"eng\" , \"licenses\" : [ { \"identifier\" : \"BSD-3\" , \"license\" : \"Berkeley Software Distribution 3\" , \"scheme\" : \"BSD-3\" , \"uri\" : \"https://opensource.org/licenses/BSD-3-Clause\" } ], \"locations\" : [ { \"description\" : \"Random place on land for random coordinates...\" , \"place\" : \"Sector 6\" , \"point\" : { \"lat\" : 82.3308575 , \"lon\" : -129.47999 } } ], \"publication_date\" : \"1970-12-05\" , \"recid\" : \"zgxnf-z7n12\" , \"references\" : [ { \"identifier\" : \"9999.99988\" , \"reference_string\" : \"Reference to something et al.\" , \"scheme\" : \"GRID\" } ], \"related_identifiers\" : [ { \"identifier\" : \"10.9999/rdm.9999988\" , \"relation_type\" : \"Requires\" , \"resource_type\" : { \"subtype\" : \"photo\" , \"type\" : \"image\" }, \"scheme\" : \"DOI\" } ], \"resource_type\" : { \"subtype\" : \"photo\" , \"type\" : \"image\" }, \"subjects\" : [ { \"identifier\" : \"subj-1\" , \"scheme\" : \"no-scheme\" , \"subject\" : \"Romans\" } ], \"titles\" : [ { \"lang\" : \"eng\" , \"title\" : \"Hicks and Sons's gallery\" , \"type\" : \"Other\" } ], \"version\" : \"v0.0.1\" } }, ... ] } } Note : Output shortened for readability. Your records will be different because they are generated randomly. Pro Tip : You can use jq for color highlighting: curl -k -XGET https://localhost:5000/api/records/ | jq .","title":"List records"},{"location":"develop/run/#create-records","text":"You can create a new record using the API: curl -k -XPOST -H \"Content-Type: application/json\" https://localhost:5000/api/records/ -d '{ \"_access\": { \"metadata_restricted\": false, \"files_restricted\": false }, \"_owners\": [1], \"_created_by\": 1, \"access_right\": \"open\", \"resource_type\": { \"type\": \"image\", \"subtype\": \"photo\" }, \"identifiers\": [ { \"identifier\": \"10.9999/rdm.9999999\", \"scheme\": \"DOI\" }, { \"identifier\": \"9999.99999\", \"scheme\": \"arXiv\" } ], \"creators\": [ { \"name\": \"Julio Cesar\", \"type\": \"Personal\", \"given_name\": \"Julio\", \"family_name\": \"Cesar\", \"identifiers\": [ { \"identifier\": \"9999-9999-9999-9999\", \"scheme\": \"Orcid\" } ], \"affiliations\": [ { \"name\": \"Entity One\", \"identifier\": \"entity-one\", \"scheme\": \"entity-id-scheme\" } ] } ], \"titles\": [ { \"title\": \"A Romans story\", \"type\": \"Other\", \"lang\": \"eng\" } ], \"descriptions\": [ { \"description\": \"A story on how Julio Cesar relates to Gladiator.\", \"type\": \"Abstract\", \"lang\": \"eng\" } ], \"community\": { \"primary\": \"Maincom\", \"secondary\": [\"Subcom One\", \"Subcom Two\"] }, \"licenses\": [ { \"license\": \"Berkeley Software Distribution 3\", \"uri\": \"https://opensource.org/licenses/BSD-3-Clause\", \"identifier\": \"BSD-3\", \"scheme\": \"BSD-3\" } ] }' And then search for it: curl -k -XGET https://localhost:5000/api/records/?q = Gladiator | python3 -m json.tool { \"aggregations\" : { \"access_right\" : { \"buckets\" : [ { \"doc_count\" : 1 , \"key\" : \"open\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 }, \"resource_type\" : { \"buckets\" : [ { \"doc_count\" : 1 , \"key\" : \"image\" } ], \"doc_count_error_upper_bound\" : 0 , \"sum_other_doc_count\" : 0 } }, \"hits\" : { \"hits\" : [ { \"created\" : \"2020-02-26T15:46:55.000116+00:00\" , \"id\" : \"8wtcp-1bs44\" , \"links\" : { \"files\" : \"https://localhost:5000/api/records/8wtcp-1bs44/files\" , \"self\" : \"https://localhost:5000/api/records/8wtcp-1bs44\" }, \"metadata\" : { \"_access\" : { \"files_restricted\" : false , \"metadata_restricted\" : false }, \"_created_by\" : 1 , \"_owners\" : [ 1 ], \"access_right\" : \"open\" , \"community\" : { \"primary\" : \"Maincom\" , \"secondary\" : [ \"Subcom One\" , \"Subcom Two\" ] }, \"creators\" : [ { \"affiliations\" : [ { \"identifier\" : \"entity-one\" , \"name\" : \"Entity One\" , \"scheme\" : \"entity-id-scheme\" } ], \"family_name\" : \"Cesar\" , \"given_name\" : \"Julio\" , \"identifiers\" : [ { \"identifier\" : \"9999-9999-9999-9999\" , \"scheme\" : \"Orcid\" } ], \"name\" : \"Julio Cesar\" , \"type\" : \"Personal\" } ], \"descriptions\" : [ { \"description\" : \"A story on how Julio Cesar relates to Gladiator.\" , \"lang\" : \"eng\" , \"type\" : \"Abstract\" } ], \"identifiers\" : [ { \"identifier\" : \"10.9999/rdm.9999999\" , \"scheme\" : \"DOI\" }, { \"identifier\" : \"9999.99999\" , \"scheme\" : \"arXiv\" } ], \"licenses\" : [ { \"identifier\" : \"BSD-3\" , \"license\" : \"Berkeley Software Distribution 3\" , \"scheme\" : \"BSD-3\" , \"uri\" : \"https://opensource.org/licenses/BSD-3-Clause\" } ], \"publication_date\" : \"2020-02-26\" , \"recid\" : \"8wtcp-1bs44\" , \"resource_type\" : { \"subtype\" : \"photo\" , \"type\" : \"image\" }, \"titles\" : [ { \"lang\" : \"eng\" , \"title\" : \"A Romans story\" , \"type\" : \"Other\" } ] }, \"revision\" : 0 , \"updated\" : \"2020-02-26T15:46:55.000119+00:00\" } ], \"total\" : 1 }, \"links\" : { \"self\" : \"https://localhost:5000/api/records/?sort=bestmatch&q=Gladiator&size=10&page=1\" } }","title":"Create records"},{"location":"develop/run/#use-your-browser","text":"Alternatively, you can use the web UI. Navigate to https://localhost:5000 . Note that you might need to accept the SSL exception since it's using a test certificate. And visit the record page for the newly created record. You will see it has no files associated with it. Let's change that!","title":"Use your browser"},{"location":"develop/run/#upload-a-file-to-a-record","text":"For demonstration purposes, we will attach this scientific photo: by Ian Matyssik . Save it as snow_doge.jpg in your current directory. Then upload it to the record: Change the recid Change pv1dx-rwa61 in the URLs below for the recid of your record. curl -k -X PUT https://localhost:5000/api/records/pv1dx-rwa61/files/snow_doge.jpg -H \"Content-Type: application/octet-stream\" --data-binary @snow_doge.jpg This file can then be previewed on the record page and even downloaded.","title":"Upload a file to a record"},{"location":"develop/troubleshoot/","text":"Troubleshooting \u00b6 Something has gone wrong, now what? InvenioRDM provides logs in two ways, depending on where the error happened. If the error comes from the local development instance ( invenio-cli run ), look at the terminal, the logs show up there. On the other hand, if the error comes from the fully containerized application ( invenio-cli containerize ), you won't see logs on the terminal directly. See below. Web Application \u00b6 If you are running the containerized environment you need to get the logs from the corresponding containers. It can be done in two steps, first obtaining the container IDs and then getting their logs: docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 5cb64814ed2a my-site-frontend \"nginx -g 'daemon of\u2026\" 24 minutes ago Up 1 minute mysite_frontend_1 39993dcbb84f my-site \"bash -c 'celery wor\u2026\" 24 minutes ago Up 1 minute mysite_worker_1 ff9a589845e4 my-site \"bash -c 'uwsgi /opt\u2026\" 24 minutes ago Up 1 minute 0.0.0.0:32810->5000/tcp mysite_web-api_1 a99532c10a8b my-site \"bash -c 'uwsgi /opt\u2026\" 24 minutes ago Up 1 minute 0.0.0.0:32811->5000/tcp mysite_web-ui_1 d9afc36a573c redis \"docker-entrypoint.s\u2026\" 24 minutes ago Up 3 minute 0.0.0.0:6379->6379/tcp mysite_cache_1 cbdac8cbd6a9 rabbitmq:3-management \"docker-entrypoint.s\u2026\" 24 minutes ago Up 3 minute 4369/tcp, 5671/tcp, 0.0.0.0:5672->5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672->15672/tcp mysite_mq_1 38d63e050e6b postgres:9.6 \"docker-entrypoint.s\u2026\" 24 minutes ago Up 3 minute 0.0.0.0:5432->5432/tcp mysite_db_1 30356839105a docker.elastic.co/elasticsearch/elasticsearch-oss:7.2.0 \"/usr/local/bin/dock\u2026\" 24 minutes ago Up 3 minute (health: starting) 0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp mysite_es_1 The most interesting ones will be the web-ui and web-api containers, which in this case have id a99532c10a8b and ff9a589845e4 respectively. The logs can be obtained by using the logs command of docker . An example of a working instance of the web-api container would show the following (trimmed output for clarity): docker logs ff9a589845e4 [uWSGI] getting INI configuration from /opt/invenio/var/instance/uwsgi_rest.ini *** Starting uWSGI 2.0.18 (64bit) on [Wed Jan 8 13:09:07 2020] *** [...] spawned uWSGI master process (pid: 1) spawned uWSGI worker 1 (pid: 255, cores: 2) spawned uWSGI worker 2 (pid: 257, cores: 2) *** Stats server enabled on 0.0.0.0:9001 fd: 11 ***","title":"Troubleshooting"},{"location":"develop/troubleshoot/#troubleshooting","text":"Something has gone wrong, now what? InvenioRDM provides logs in two ways, depending on where the error happened. If the error comes from the local development instance ( invenio-cli run ), look at the terminal, the logs show up there. On the other hand, if the error comes from the fully containerized application ( invenio-cli containerize ), you won't see logs on the terminal directly. See below.","title":"Troubleshooting"},{"location":"develop/troubleshoot/#web-application","text":"If you are running the containerized environment you need to get the logs from the corresponding containers. It can be done in two steps, first obtaining the container IDs and then getting their logs: docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 5cb64814ed2a my-site-frontend \"nginx -g 'daemon of\u2026\" 24 minutes ago Up 1 minute mysite_frontend_1 39993dcbb84f my-site \"bash -c 'celery wor\u2026\" 24 minutes ago Up 1 minute mysite_worker_1 ff9a589845e4 my-site \"bash -c 'uwsgi /opt\u2026\" 24 minutes ago Up 1 minute 0.0.0.0:32810->5000/tcp mysite_web-api_1 a99532c10a8b my-site \"bash -c 'uwsgi /opt\u2026\" 24 minutes ago Up 1 minute 0.0.0.0:32811->5000/tcp mysite_web-ui_1 d9afc36a573c redis \"docker-entrypoint.s\u2026\" 24 minutes ago Up 3 minute 0.0.0.0:6379->6379/tcp mysite_cache_1 cbdac8cbd6a9 rabbitmq:3-management \"docker-entrypoint.s\u2026\" 24 minutes ago Up 3 minute 4369/tcp, 5671/tcp, 0.0.0.0:5672->5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672->15672/tcp mysite_mq_1 38d63e050e6b postgres:9.6 \"docker-entrypoint.s\u2026\" 24 minutes ago Up 3 minute 0.0.0.0:5432->5432/tcp mysite_db_1 30356839105a docker.elastic.co/elasticsearch/elasticsearch-oss:7.2.0 \"/usr/local/bin/dock\u2026\" 24 minutes ago Up 3 minute (health: starting) 0.0.0.0:9200->9200/tcp, 0.0.0.0:9300->9300/tcp mysite_es_1 The most interesting ones will be the web-ui and web-api containers, which in this case have id a99532c10a8b and ff9a589845e4 respectively. The logs can be obtained by using the logs command of docker . An example of a working instance of the web-api container would show the following (trimmed output for clarity): docker logs ff9a589845e4 [uWSGI] getting INI configuration from /opt/invenio/var/instance/uwsgi_rest.ini *** Starting uWSGI 2.0.18 (64bit) on [Wed Jan 8 13:09:07 2020] *** [...] spawned uWSGI master process (pid: 1) spawned uWSGI worker 1 (pid: 255, cores: 2) spawned uWSGI worker 2 (pid: 257, cores: 2) *** Stats server enabled on 0.0.0.0:9001 fd: 11 ***","title":"Web Application"},{"location":"extensions/","text":"What can be added? \u00b6 InvenioRDM supports a great variety of extensions that can help you adapt it to your infrastructure. The currently supported extensions are listed below. Develop your own extension \u00b6 If you want to add custom functionality to your RDM instance, you need to develop your own module. We have the docs and cookiecutter template to get you started in no time. > Develop an extension Storage \u00b6 S3 can be configured to serve as your storage backend via the invenio-s3 extension. If you chose S3 as storage when initializing your instance, navigate here . Otherwise, navigate to this section .","title":"What can be added?"},{"location":"extensions/#what-can-be-added","text":"InvenioRDM supports a great variety of extensions that can help you adapt it to your infrastructure. The currently supported extensions are listed below.","title":"What can be added?"},{"location":"extensions/#develop-your-own-extension","text":"If you want to add custom functionality to your RDM instance, you need to develop your own module. We have the docs and cookiecutter template to get you started in no time. > Develop an extension","title":"Develop your own extension"},{"location":"extensions/#storage","text":"S3 can be configured to serve as your storage backend via the invenio-s3 extension. If you chose S3 as storage when initializing your instance, navigate here . Otherwise, navigate to this section .","title":"Storage"},{"location":"extensions/custom/","text":"Extensions \u00b6 If you want to add custom functionality to your RDM instance, you need to develop your own module. You can start in no time by using the cookiecutter-invenio-module template. Create your module \u00b6 Let's run the cookiecutter: cookiecutter https://github.com/inveniosoftware/cookiecutter-invenio-module Add your functionality \u00b6 We've added a simple view to the blueprint in <your_custom_module>/views.py , which looks like: # Other code ignored for clarity blueprint = Blueprint ( 'invenio_rdm_extension_demo' , __name__ ) @blueprint . route ( \"/rdm-ext-demo\" ) def index (): \"\"\"RDM Extension Demo view.\"\"\" return 'RDM Extension Demo!' Integrate it in your InvenioRDM instance \u00b6 Once you have your functionality ready, in order to add it to your instance you just have to install the module via pipenv: cd path/to/your/instance pipenv install [ --pre ] -e path/to/your/extension As you can see, --pre is optional. It is only needed when the package is in a pre-release state. In addition, note that you do not need to specify a local path. If the package is available e.g. via PyPi, you can just install it by its name. Sanity check and run! \u00b6 Check that the Pipfile got a new line with your extension. For example: ... [packages] ... invenio-rdm-extension-demo = {editable = true, path=\"../invenio-rdm-ext-demo\"} ... It's all set, run your instance with the cli and you will have your new features available! invenio-cli run UI related extensions If your extension adds scss and/or javascript, you will need to update your final static files before running your instance! You can do so with the CLI: invenio-cli update [--no-install-js]","title":"Add your extensions"},{"location":"extensions/custom/#extensions","text":"If you want to add custom functionality to your RDM instance, you need to develop your own module. You can start in no time by using the cookiecutter-invenio-module template.","title":"Extensions"},{"location":"extensions/custom/#create-your-module","text":"Let's run the cookiecutter: cookiecutter https://github.com/inveniosoftware/cookiecutter-invenio-module","title":"Create your module"},{"location":"extensions/custom/#add-your-functionality","text":"We've added a simple view to the blueprint in <your_custom_module>/views.py , which looks like: # Other code ignored for clarity blueprint = Blueprint ( 'invenio_rdm_extension_demo' , __name__ ) @blueprint . route ( \"/rdm-ext-demo\" ) def index (): \"\"\"RDM Extension Demo view.\"\"\" return 'RDM Extension Demo!'","title":"Add your functionality"},{"location":"extensions/custom/#integrate-it-in-your-inveniordm-instance","text":"Once you have your functionality ready, in order to add it to your instance you just have to install the module via pipenv: cd path/to/your/instance pipenv install [ --pre ] -e path/to/your/extension As you can see, --pre is optional. It is only needed when the package is in a pre-release state. In addition, note that you do not need to specify a local path. If the package is available e.g. via PyPi, you can just install it by its name.","title":"Integrate it in your InvenioRDM instance"},{"location":"extensions/custom/#sanity-check-and-run","text":"Check that the Pipfile got a new line with your extension. For example: ... [packages] ... invenio-rdm-extension-demo = {editable = true, path=\"../invenio-rdm-ext-demo\"} ... It's all set, run your instance with the cli and you will have your new features available! invenio-cli run UI related extensions If your extension adds scss and/or javascript, you will need to update your final static files before running your instance! You can do so with the CLI: invenio-cli update [--no-install-js]","title":"Sanity check and run!"},{"location":"extensions/s3/","text":"S3 as Storage backend \u00b6 I chose S3 when initializing the repository! \u00b6 If you are reading this section, you are lucky! You will only have to perform a few configuration changes. If on the contrary you didn't choose S3 as storage when initializing the repository file system, navigate below to follow more in depth instructions! Create a bucket \u00b6 InvenioRDM uses a MinIO container for S3-like storage. To create a bucket in MinIO you can: a. Install the mc tool and run the following command, where default-bucket is the name of your bucket. mc mb default-bucket b. Use the web UI (https://localhost[:9000]/minio). In the bottom right you will see a + sign, click there and add a new bucket. Create a new location \u00b6 Now you need to tell InvenioRDM where that bucket is. For that, create a new location. If you are running a local (development) instance, run: cd path/to/your/instance pipenv run invenio files location create s3-default s3://default-bucket --default If you are running the containerized version, run: docker exec -it <web_ [ api | ui ] container name or id> /bin/bash invenio files location create s3-default s3://default-bucket --default Set your credentials \u00b6 The last step is to set your credentials so your instance can authenticate against the S3 container. By default, the ACCESS_KEY and the ACCESS_ID of MinIO are \"CHANGE_ME\", and so they are set in the invenio.cfg file. If you changed them (you should) modify them accordingly in the config file. It's done! Ready to roll! I didn't choose S3 when initializing \u00b6 You are here, but do not panic, it's not difficult just longer. Coming soon.","title":"S3 Storage"},{"location":"extensions/s3/#s3-as-storage-backend","text":"","title":"S3 as Storage backend"},{"location":"extensions/s3/#i-chose-s3-when-initializing-the-repository","text":"If you are reading this section, you are lucky! You will only have to perform a few configuration changes. If on the contrary you didn't choose S3 as storage when initializing the repository file system, navigate below to follow more in depth instructions!","title":"I chose S3 when initializing the repository!"},{"location":"extensions/s3/#create-a-bucket","text":"InvenioRDM uses a MinIO container for S3-like storage. To create a bucket in MinIO you can: a. Install the mc tool and run the following command, where default-bucket is the name of your bucket. mc mb default-bucket b. Use the web UI (https://localhost[:9000]/minio). In the bottom right you will see a + sign, click there and add a new bucket.","title":"Create a bucket"},{"location":"extensions/s3/#create-a-new-location","text":"Now you need to tell InvenioRDM where that bucket is. For that, create a new location. If you are running a local (development) instance, run: cd path/to/your/instance pipenv run invenio files location create s3-default s3://default-bucket --default If you are running the containerized version, run: docker exec -it <web_ [ api | ui ] container name or id> /bin/bash invenio files location create s3-default s3://default-bucket --default","title":"Create a new location"},{"location":"extensions/s3/#set-your-credentials","text":"The last step is to set your credentials so your instance can authenticate against the S3 container. By default, the ACCESS_KEY and the ACCESS_ID of MinIO are \"CHANGE_ME\", and so they are set in the invenio.cfg file. If you changed them (you should) modify them accordingly in the config file. It's done! Ready to roll!","title":"Set your credentials"},{"location":"extensions/s3/#i-didnt-choose-s3-when-initializing","text":"You are here, but do not panic, it's not difficult just longer. Coming soon.","title":"I didn't choose S3 when initializing"},{"location":"install/","text":"Installation \u00b6 To get started with InvenioRDM, you need to install invenio-cli , our command line tool for creating and updating your instance. Pre-Requirements \u00b6 Some system requirements are needed beforehand: Python (3.6.2 <= supported version < 3.7.0 only) nodejs (10.0.0+) (not needed to preview, only needed to develop) Docker (1.13.0+) Docker-Compose (1.17.0+) Other Python distributions InvenioRDM targets CPython 3.6 (lowest 3.6.2). Anaconda Python in particular is not currently supported and other Python distributions are not tested. In addition, make sure the user that will be executing the CLI has access to the docker command (i.e. it is not only available for the root user): sudo usermod --append --groups docker $USER Hardware requirements We usually deploy the RDM in machines that have around 8GB of RAM and at least 4 cores. InvenioRDM can certainly run (for demo purposes) with less, just take into account that you are going to be running between 4 and 8 containers (among them an Elasticsearch container, which is quite demanding). Once you have installed these requirements, you can install the CLI. Install the CLI \u00b6 You can install and manage your InvenioRDM instance using the Invenio CLI package, aptly named invenio-cli . The package is available on PyPI . Use your favorite way to install a Python package: Via pip: pip install invenio-cli Via pipenv: pipenv install invenio-cli Via pipx: pipx install invenio-cli To make sure you've installed successfully: invenio-cli --version invenio-cli, version 0.10.1 CLI version The CLI is in pre 1.0 release. The last release's version is 0.10.1 . Your version may be different than the above.","title":"Installation"},{"location":"install/#installation","text":"To get started with InvenioRDM, you need to install invenio-cli , our command line tool for creating and updating your instance.","title":"Installation"},{"location":"install/#pre-requirements","text":"Some system requirements are needed beforehand: Python (3.6.2 <= supported version < 3.7.0 only) nodejs (10.0.0+) (not needed to preview, only needed to develop) Docker (1.13.0+) Docker-Compose (1.17.0+) Other Python distributions InvenioRDM targets CPython 3.6 (lowest 3.6.2). Anaconda Python in particular is not currently supported and other Python distributions are not tested. In addition, make sure the user that will be executing the CLI has access to the docker command (i.e. it is not only available for the root user): sudo usermod --append --groups docker $USER Hardware requirements We usually deploy the RDM in machines that have around 8GB of RAM and at least 4 cores. InvenioRDM can certainly run (for demo purposes) with less, just take into account that you are going to be running between 4 and 8 containers (among them an Elasticsearch container, which is quite demanding). Once you have installed these requirements, you can install the CLI.","title":"Pre-Requirements"},{"location":"install/#install-the-cli","text":"You can install and manage your InvenioRDM instance using the Invenio CLI package, aptly named invenio-cli . The package is available on PyPI . Use your favorite way to install a Python package: Via pip: pip install invenio-cli Via pipenv: pipenv install invenio-cli Via pipx: pipx install invenio-cli To make sure you've installed successfully: invenio-cli --version invenio-cli, version 0.10.1 CLI version The CLI is in pre 1.0 release. The last release's version is 0.10.1 . Your version may be different than the above.","title":"Install the CLI"},{"location":"preview/","text":"Quick preview of InvenioRDM \u00b6 Now that you have invenio-cli installed , we will use it to give you a very quick preview of InvenioRDM. We will initialize an InvenioRDM project and run a fully containerized local instance. This way, you can see for yourself how simple it is to get started and what an InvenioRDM instance looks like. Initialize your file system \u00b6 First, we need to create the project - the necessary files and folders for your InvenioRDM instance. The CLI will require the following data: Project name : Title of your project with space allowed (project name for humans) Project short name : Hyphenated and lowercased title (project name for machines) Project website : URL where the project will be deployed Github repository : Repository in format <owner>/<code repository> Description : Short description of project Author name : Your name or that of your organization Author email : Email for communication Year : The current year One of the three available storage systems : postgresql (default), mysql or sqlite The version of Elasticsearch : 7 (default) or 6 Storage backend : Local file system or in a S3-like backend. If S3 is chosen a MinIO container is provided, however, you can set it up to use your own. See more in S3 extension It will also generate a test private key. Let's do it! Pressing [Enter] selects the option in brackets [] . invenio-cli init --flavour = RDM Initializing RDM application... project_name [My Site]: February Release project_shortname [february-release]: project_site [february-release.com]: github_repo [february-release/february-release]: description [Invenio RDM February Release Instance]: author_name [CERN]: author_email [info@february-release.com]: year [2020]: Select database: 1 - postgresql 2 - mysql 3 - sqlite Choose from 1, 2, 3 (1, 2, 3) [1]: Select elasticsearch: 1 - 7 2 - 6 Choose from 1, 2 (1, 2) [1]: Select file_storage: 1 - local 2 - S3 Choose from 1, 2 (1, 2) [1]: ------------------------------------------------------------------------------- Generating SSL certificate and private key for testing.... Can't load /home/youruser/.rnd into RNG 139989104693696:error:2406F079:random number generator:RAND_load_file:Cannot open file:../crypto/rand/randfile.c:88:Filename=/home/youruser/.rnd Generating a RSA private key ..................++++ ..................................++++ writing new private key to 'docker/nginx/test.key' ----- ------------------------------------------------------------------------------- Creating logs directory... Observe the generated files. A full description of each of them can be found in the invenio-cli RFC ls -la february-release total 56 drwxr-xr-x 5 youruser youruser 4096 Feb 19 13:45 ./ drwxr-xr-x 5 youruser youruser 4096 Feb 19 13:45 ../ drwxr-xr-x 3 youruser youruser 4096 Feb 19 13:45 assets/ drwxr-xr-x 4 youruser youruser 4096 Feb 19 13:45 docker/ -rw-r--r-- 1 youruser youruser 2932 Feb 19 13:45 docker-compose.full.yml -rw-r--r-- 1 youruser youruser 943 Feb 19 13:45 docker-compose.yml -rw-r--r-- 1 youruser youruser 1152 Feb 19 13:45 Dockerfile -rw-r--r-- 1 youruser youruser 46 Feb 19 13:45 .dockerignore -rw-r--r-- 1 youruser youruser 2665 Feb 19 13:45 docker-services.yml -rw-r--r-- 1 youruser youruser 2018 Feb 19 13:45 .invenio -rw-r--r-- 1 youruser youruser 1504 Feb 19 13:45 invenio.cfg drwxr-xr-x 2 youruser youruser 4096 Feb 19 13:45 logs/ -rw-r--r-- 1 youruser youruser 431 Feb 19 13:45 Pipfile -rw-r--r-- 1 youruser youruser 756 Feb 19 13:45 README.rst drwxr-xr-x 3 youruser youruser 4096 Feb 19 13:45 static/ drwxr-xr-x 2 youruser youruser 4096 Feb 19 13:45 templates/ Notes and Known Issues For now, the only available flavour is RDM (Research Data Management). In the future, there will be others, for example ILS (Integrated Library System). You may be prompted with You've downloaded /home/<username>/.cookiecutters/cookiecutter-invenio-rdm before. Is it okay to delete and re-download it? [yes]: . Press [Enter] in that case. This will download the latest cookiecutter template. Some OpenSSL versions display an error message when obtaining random numbers, but this has no incidence (as far as we can tell) on functionality. We are investigating a possible solution to raise less eyebrows for appearance sake. Containerize and run your instance \u00b6 The project is initialized, we just need to run it. Switch to the project directory and do so: cd february-release invenio-cli containerize <... build output ignored ...> Instance running! Visit https://localhost firefox https://localhost You now have a running instance of InvenioRDM at https://localhost , but it doesn't have any records in it. For demonstration purposes, we will add randomly generated records: invenio-cli demo --containers You can now get a full sense for what InvenioRDM offers and explore. Running Invenio commands \u00b6 If you are already familiar with Invenio and the many commands its CLI ( invenio ) provides, you might be wondering how to execute those. Because the entire application is containerized, you need to connect to the web-api or web-ui container in order to use one of those commands. In fact, this is what invenio-cli does behind the scene! docker exec -it <container name or id> /bin/bash invenio <your command> You can use docker ps to get the name or id of the web-api or web-ui container. Conclusions \u00b6 In just two commands you can get a preview of InvenioRDM: invenio-cli init --flavour = RDM cd <project name> invenio-cli containerize These instructions don't provide you with a nice development experience though. You need to run invenio-cli containerize for every change you make in your project. That's slow and cumbersome. Up next, we show how to develop your local instance and set yourself up to be productive!","title":"Quick preview of InvenioRDM"},{"location":"preview/#quick-preview-of-inveniordm","text":"Now that you have invenio-cli installed , we will use it to give you a very quick preview of InvenioRDM. We will initialize an InvenioRDM project and run a fully containerized local instance. This way, you can see for yourself how simple it is to get started and what an InvenioRDM instance looks like.","title":"Quick preview of InvenioRDM"},{"location":"preview/#initialize-your-file-system","text":"First, we need to create the project - the necessary files and folders for your InvenioRDM instance. The CLI will require the following data: Project name : Title of your project with space allowed (project name for humans) Project short name : Hyphenated and lowercased title (project name for machines) Project website : URL where the project will be deployed Github repository : Repository in format <owner>/<code repository> Description : Short description of project Author name : Your name or that of your organization Author email : Email for communication Year : The current year One of the three available storage systems : postgresql (default), mysql or sqlite The version of Elasticsearch : 7 (default) or 6 Storage backend : Local file system or in a S3-like backend. If S3 is chosen a MinIO container is provided, however, you can set it up to use your own. See more in S3 extension It will also generate a test private key. Let's do it! Pressing [Enter] selects the option in brackets [] . invenio-cli init --flavour = RDM Initializing RDM application... project_name [My Site]: February Release project_shortname [february-release]: project_site [february-release.com]: github_repo [february-release/february-release]: description [Invenio RDM February Release Instance]: author_name [CERN]: author_email [info@february-release.com]: year [2020]: Select database: 1 - postgresql 2 - mysql 3 - sqlite Choose from 1, 2, 3 (1, 2, 3) [1]: Select elasticsearch: 1 - 7 2 - 6 Choose from 1, 2 (1, 2) [1]: Select file_storage: 1 - local 2 - S3 Choose from 1, 2 (1, 2) [1]: ------------------------------------------------------------------------------- Generating SSL certificate and private key for testing.... Can't load /home/youruser/.rnd into RNG 139989104693696:error:2406F079:random number generator:RAND_load_file:Cannot open file:../crypto/rand/randfile.c:88:Filename=/home/youruser/.rnd Generating a RSA private key ..................++++ ..................................++++ writing new private key to 'docker/nginx/test.key' ----- ------------------------------------------------------------------------------- Creating logs directory... Observe the generated files. A full description of each of them can be found in the invenio-cli RFC ls -la february-release total 56 drwxr-xr-x 5 youruser youruser 4096 Feb 19 13:45 ./ drwxr-xr-x 5 youruser youruser 4096 Feb 19 13:45 ../ drwxr-xr-x 3 youruser youruser 4096 Feb 19 13:45 assets/ drwxr-xr-x 4 youruser youruser 4096 Feb 19 13:45 docker/ -rw-r--r-- 1 youruser youruser 2932 Feb 19 13:45 docker-compose.full.yml -rw-r--r-- 1 youruser youruser 943 Feb 19 13:45 docker-compose.yml -rw-r--r-- 1 youruser youruser 1152 Feb 19 13:45 Dockerfile -rw-r--r-- 1 youruser youruser 46 Feb 19 13:45 .dockerignore -rw-r--r-- 1 youruser youruser 2665 Feb 19 13:45 docker-services.yml -rw-r--r-- 1 youruser youruser 2018 Feb 19 13:45 .invenio -rw-r--r-- 1 youruser youruser 1504 Feb 19 13:45 invenio.cfg drwxr-xr-x 2 youruser youruser 4096 Feb 19 13:45 logs/ -rw-r--r-- 1 youruser youruser 431 Feb 19 13:45 Pipfile -rw-r--r-- 1 youruser youruser 756 Feb 19 13:45 README.rst drwxr-xr-x 3 youruser youruser 4096 Feb 19 13:45 static/ drwxr-xr-x 2 youruser youruser 4096 Feb 19 13:45 templates/ Notes and Known Issues For now, the only available flavour is RDM (Research Data Management). In the future, there will be others, for example ILS (Integrated Library System). You may be prompted with You've downloaded /home/<username>/.cookiecutters/cookiecutter-invenio-rdm before. Is it okay to delete and re-download it? [yes]: . Press [Enter] in that case. This will download the latest cookiecutter template. Some OpenSSL versions display an error message when obtaining random numbers, but this has no incidence (as far as we can tell) on functionality. We are investigating a possible solution to raise less eyebrows for appearance sake.","title":"Initialize your file system"},{"location":"preview/#containerize-and-run-your-instance","text":"The project is initialized, we just need to run it. Switch to the project directory and do so: cd february-release invenio-cli containerize <... build output ignored ...> Instance running! Visit https://localhost firefox https://localhost You now have a running instance of InvenioRDM at https://localhost , but it doesn't have any records in it. For demonstration purposes, we will add randomly generated records: invenio-cli demo --containers You can now get a full sense for what InvenioRDM offers and explore.","title":"Containerize and run your instance"},{"location":"preview/#running-invenio-commands","text":"If you are already familiar with Invenio and the many commands its CLI ( invenio ) provides, you might be wondering how to execute those. Because the entire application is containerized, you need to connect to the web-api or web-ui container in order to use one of those commands. In fact, this is what invenio-cli does behind the scene! docker exec -it <container name or id> /bin/bash invenio <your command> You can use docker ps to get the name or id of the web-api or web-ui container.","title":"Running Invenio commands"},{"location":"preview/#conclusions","text":"In just two commands you can get a preview of InvenioRDM: invenio-cli init --flavour = RDM cd <project name> invenio-cli containerize These instructions don't provide you with a nice development experience though. You need to run invenio-cli containerize for every change you make in your project. That's slow and cumbersome. Up next, we show how to develop your local instance and set yourself up to be productive!","title":"Conclusions"}]}